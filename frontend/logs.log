2025-08-19 16:13:51,082:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:13:51,082:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:13:51,082:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:13:51,082:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:16:15,971:INFO:PyCaret ClassificationExperiment
2025-08-19 16:16:15,971:INFO:Logging name: clf-default-name
2025-08-19 16:16:15,972:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-19 16:16:15,973:INFO:version 3.3.2
2025-08-19 16:16:15,973:INFO:Initializing setup()
2025-08-19 16:16:15,974:INFO:self.USI: 36d8
2025-08-19 16:16:15,974:INFO:self._variable_keys: {'_available_plots', 'exp_name_log', 'data', 'gpu_n_jobs_param', 'html_param', 'log_plots_param', 'memory', 'pipeline', 'exp_id', 'n_jobs_param', '_ml_usecase', 'fold_shuffle_param', 'fold_groups_param', 'fix_imbalance', 'X_train', 'is_multiclass', 'X_test', 'fold_generator', 'gpu_param', 'USI', 'seed', 'idx', 'target_param', 'y', 'y_test', 'X', 'y_train', 'logging_param'}
2025-08-19 16:16:15,974:INFO:Checking environment
2025-08-19 16:16:15,974:INFO:python_version: 3.9.23
2025-08-19 16:16:15,975:INFO:python_build: ('main', 'Jun  5 2025 13:25:08')
2025-08-19 16:16:15,975:INFO:machine: AMD64
2025-08-19 16:16:16,021:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 16:16:16,025:INFO:Memory: svmem(total=17015848960, available=1742893056, percent=89.8, used=15272955904, free=1742893056)
2025-08-19 16:16:16,025:INFO:Physical Core: 6
2025-08-19 16:16:16,025:INFO:Logical Core: 12
2025-08-19 16:16:16,025:INFO:Checking libraries
2025-08-19 16:16:16,025:INFO:System:
2025-08-19 16:16:16,026:INFO:    python: 3.9.23 (main, Jun  5 2025, 13:25:08) [MSC v.1929 64 bit (AMD64)]
2025-08-19 16:16:16,026:INFO:executable: D:\Programming\My_works\conda_env\auto_ml\python.exe
2025-08-19 16:16:16,026:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 16:16:16,026:INFO:PyCaret required dependencies:
2025-08-19 16:16:16,170:INFO:                 pip: 25.1
2025-08-19 16:16:16,170:INFO:          setuptools: 78.1.1
2025-08-19 16:16:16,170:INFO:             pycaret: 3.3.2
2025-08-19 16:16:16,170:INFO:             IPython: 8.18.1
2025-08-19 16:16:16,170:INFO:          ipywidgets: 8.1.7
2025-08-19 16:16:16,170:INFO:                tqdm: 4.67.1
2025-08-19 16:16:16,170:INFO:               numpy: 1.26.4
2025-08-19 16:16:16,170:INFO:              pandas: 2.1.4
2025-08-19 16:16:16,170:INFO:              jinja2: 3.1.6
2025-08-19 16:16:16,170:INFO:               scipy: 1.11.4
2025-08-19 16:16:16,170:INFO:              joblib: 1.3.2
2025-08-19 16:16:16,170:INFO:             sklearn: 1.4.2
2025-08-19 16:16:16,170:INFO:                pyod: 2.0.5
2025-08-19 16:16:16,170:INFO:            imblearn: 0.12.4
2025-08-19 16:16:16,171:INFO:   category_encoders: 2.6.4
2025-08-19 16:16:16,171:INFO:            lightgbm: 4.6.0
2025-08-19 16:16:16,171:INFO:               numba: 0.60.0
2025-08-19 16:16:16,171:INFO:            requests: 2.32.5
2025-08-19 16:16:16,171:INFO:          matplotlib: 3.7.5
2025-08-19 16:16:16,171:INFO:          scikitplot: 0.3.7
2025-08-19 16:16:16,171:INFO:         yellowbrick: 1.5
2025-08-19 16:16:16,172:INFO:              plotly: 5.24.1
2025-08-19 16:16:16,172:INFO:    plotly-resampler: Not installed
2025-08-19 16:16:16,172:INFO:             kaleido: 1.0.0
2025-08-19 16:16:16,172:INFO:           schemdraw: 0.15
2025-08-19 16:16:16,172:INFO:         statsmodels: 0.14.5
2025-08-19 16:16:16,172:INFO:              sktime: 0.26.0
2025-08-19 16:16:16,172:INFO:               tbats: 1.1.3
2025-08-19 16:16:16,172:INFO:            pmdarima: 2.0.4
2025-08-19 16:16:16,172:INFO:              psutil: 6.1.0
2025-08-19 16:16:16,172:INFO:          markupsafe: 3.0.2
2025-08-19 16:16:16,172:INFO:             pickle5: Not installed
2025-08-19 16:16:16,172:INFO:         cloudpickle: 3.1.1
2025-08-19 16:16:16,172:INFO:         deprecation: 2.1.0
2025-08-19 16:16:16,172:INFO:              xxhash: 3.5.0
2025-08-19 16:16:16,172:INFO:           wurlitzer: Not installed
2025-08-19 16:16:16,173:INFO:PyCaret optional dependencies:
2025-08-19 16:16:16,211:INFO:                shap: Not installed
2025-08-19 16:16:16,211:INFO:           interpret: Not installed
2025-08-19 16:16:16,211:INFO:                umap: Not installed
2025-08-19 16:16:16,211:INFO:     ydata_profiling: Not installed
2025-08-19 16:16:16,211:INFO:  explainerdashboard: Not installed
2025-08-19 16:16:16,211:INFO:             autoviz: Not installed
2025-08-19 16:16:16,211:INFO:           fairlearn: Not installed
2025-08-19 16:16:16,211:INFO:          deepchecks: Not installed
2025-08-19 16:16:16,211:INFO:             xgboost: Not installed
2025-08-19 16:16:16,211:INFO:            catboost: Not installed
2025-08-19 16:16:16,211:INFO:              kmodes: Not installed
2025-08-19 16:16:16,211:INFO:             mlxtend: Not installed
2025-08-19 16:16:16,211:INFO:       statsforecast: Not installed
2025-08-19 16:16:16,212:INFO:        tune_sklearn: Not installed
2025-08-19 16:16:16,212:INFO:                 ray: Not installed
2025-08-19 16:16:16,212:INFO:            hyperopt: Not installed
2025-08-19 16:16:16,212:INFO:              optuna: Not installed
2025-08-19 16:16:16,212:INFO:               skopt: Not installed
2025-08-19 16:16:16,212:INFO:              mlflow: Not installed
2025-08-19 16:16:16,212:INFO:              gradio: Not installed
2025-08-19 16:16:16,212:INFO:             fastapi: Not installed
2025-08-19 16:16:16,213:INFO:             uvicorn: Not installed
2025-08-19 16:16:16,213:INFO:              m2cgen: Not installed
2025-08-19 16:16:16,213:INFO:           evidently: Not installed
2025-08-19 16:16:16,213:INFO:               fugue: Not installed
2025-08-19 16:16:16,213:INFO:           streamlit: 1.48.1
2025-08-19 16:16:16,213:INFO:             prophet: Not installed
2025-08-19 16:16:16,213:INFO:None
2025-08-19 16:16:16,213:INFO:Set up data.
2025-08-19 16:16:16,369:INFO:Set up folding strategy.
2025-08-19 16:16:16,370:INFO:Set up train/test split.
2025-08-19 16:16:16,539:INFO:Set up index.
2025-08-19 16:16:16,555:INFO:Assigning column types.
2025-08-19 16:16:16,587:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-19 16:16:16,638:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:16:16,652:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 16:16:16,729:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,729:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:16:16,779:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 16:16:16,810:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,810:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,811:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-19 16:16:16,860:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 16:16:16,892:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,893:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,945:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 16:16:16,978:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:16,979:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-19 16:16:17,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:17,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:17,202:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:17,202:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:17,210:INFO:Preparing preprocessing pipeline...
2025-08-19 16:16:17,214:INFO:Set up label encoding.
2025-08-19 16:16:17,215:INFO:Set up simple imputation.
2025-08-19 16:16:17,224:INFO:Set up encoding of ordinal features.
2025-08-19 16:16:17,228:INFO:Set up encoding of categorical features.
2025-08-19 16:16:17,874:INFO:Finished creating preprocessing pipeline.
2025-08-19 16:16:17,923:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Public\Documents\ESTsoft\CreatorTemp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Year', 'Engine_Size_L',
                                             'Mileage_KM', 'Price_USD',
                                             'Sales_Volume'],
                                    transformer=SimpleImpute...
Manual       1
NaN         -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['Model', 'Region', 'Color',
                                             'Fuel_Type'],
                                    transformer=OneHotEncoder(cols=['Model',
                                                                    'Region',
                                                                    'Color',
                                                                    'Fuel_Type'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-08-19 16:16:17,924:INFO:Creating final display dataframe.
2025-08-19 16:16:20,103:INFO:Setup _display_container:                     Description                 Value
0                    Session id                   123
1                        Target  Sales_Classification
2                   Target type                Binary
3                Target mapping       High: 0, Low: 1
4           Original data shape           (50000, 11)
5        Transformed data shape           (50000, 34)
6   Transformed train set shape           (35000, 34)
7    Transformed test set shape           (15000, 34)
8              Numeric features                     5
9          Categorical features                     5
10                   Preprocess                  True
11              Imputation type                simple
12           Numeric imputation                  mean
13       Categorical imputation                  mode
14     Maximum one-hot encoding                    25
15              Encoding method                  None
16               Fold Generator       StratifiedKFold
17                  Fold Number                    10
18                     CPU Jobs                    -1
19                      Use GPU                 False
20               Log Experiment                 False
21              Experiment Name      clf-default-name
22                          USI                  36d8
2025-08-19 16:16:20,348:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:20,349:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:20,573:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:20,574:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:16:20,576:INFO:setup() successfully completed in 4.72s...............
2025-08-19 16:16:20,577:INFO:Initializing compare_models()
2025-08-19 16:16:20,577:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-08-19 16:16:20,578:INFO:Checking exceptions
2025-08-19 16:16:20,611:INFO:Preparing display monitor
2025-08-19 16:16:20,621:INFO:Initializing Logistic Regression
2025-08-19 16:16:20,621:INFO:Total runtime is 1.0840098063151042e-05 minutes
2025-08-19 16:16:20,622:INFO:SubProcess create_model() called ==================================
2025-08-19 16:16:20,622:INFO:Initializing create_model()
2025-08-19 16:16:20,622:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:16:20,622:INFO:Checking exceptions
2025-08-19 16:16:20,622:INFO:Importing libraries
2025-08-19 16:16:20,623:INFO:Copying training dataset
2025-08-19 16:16:20,664:INFO:Defining folds
2025-08-19 16:16:20,665:INFO:Declaring metric variables
2025-08-19 16:16:20,665:INFO:Importing untrained model
2025-08-19 16:16:20,666:INFO:Logistic Regression Imported successfully
2025-08-19 16:16:20,670:INFO:Starting cross validation
2025-08-19 16:16:20,678:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:16:46,934:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:46,934:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:46,999:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,072:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,098:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,114:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,233:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,243:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,251:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,291:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,301:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,324:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,340:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,367:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,385:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,413:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,435:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,461:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,496:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,514:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,529:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,548:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,579:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,630:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,651:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,706:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,767:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,836:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,879:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,923:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:47,972:INFO:Calculating mean and std
2025-08-19 16:16:47,996:INFO:Creating metrics dataframe
2025-08-19 16:16:47,998:INFO:Uploading results into container
2025-08-19 16:16:47,999:INFO:Uploading model into container now
2025-08-19 16:16:48,000:INFO:_master_model_container: 1
2025-08-19 16:16:48,000:INFO:_display_container: 2
2025-08-19 16:16:48,000:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-19 16:16:48,000:INFO:create_model() successfully completed......................................
2025-08-19 16:16:48,104:INFO:SubProcess create_model() end ==================================
2025-08-19 16:16:48,104:INFO:Creating metrics dataframe
2025-08-19 16:16:48,110:INFO:Initializing K Neighbors Classifier
2025-08-19 16:16:48,111:INFO:Total runtime is 0.45816728671391804 minutes
2025-08-19 16:16:48,111:INFO:SubProcess create_model() called ==================================
2025-08-19 16:16:48,112:INFO:Initializing create_model()
2025-08-19 16:16:48,112:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:16:48,112:INFO:Checking exceptions
2025-08-19 16:16:48,112:INFO:Importing libraries
2025-08-19 16:16:48,112:INFO:Copying training dataset
2025-08-19 16:16:48,142:INFO:Defining folds
2025-08-19 16:16:48,142:INFO:Declaring metric variables
2025-08-19 16:16:48,143:INFO:Importing untrained model
2025-08-19 16:16:48,143:INFO:K Neighbors Classifier Imported successfully
2025-08-19 16:16:48,144:INFO:Starting cross validation
2025-08-19 16:16:48,147:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:16:55,316:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,347:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,388:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,428:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,457:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,498:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,640:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,676:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,679:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,706:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,735:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,739:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,767:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,776:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,796:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,806:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,834:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,868:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,879:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,893:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,918:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,931:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,965:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:16:55,972:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:00,731:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:00,762:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:00,797:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:00,915:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:00,950:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:00,998:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:01,072:INFO:Calculating mean and std
2025-08-19 16:17:01,073:INFO:Creating metrics dataframe
2025-08-19 16:17:01,077:INFO:Uploading results into container
2025-08-19 16:17:01,078:INFO:Uploading model into container now
2025-08-19 16:17:01,078:INFO:_master_model_container: 2
2025-08-19 16:17:01,079:INFO:_display_container: 2
2025-08-19 16:17:01,079:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-19 16:17:01,079:INFO:create_model() successfully completed......................................
2025-08-19 16:17:01,191:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:01,191:INFO:Creating metrics dataframe
2025-08-19 16:17:01,199:INFO:Initializing Naive Bayes
2025-08-19 16:17:01,199:INFO:Total runtime is 0.6763067642847697 minutes
2025-08-19 16:17:01,199:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:01,200:INFO:Initializing create_model()
2025-08-19 16:17:01,200:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:01,200:INFO:Checking exceptions
2025-08-19 16:17:01,200:INFO:Importing libraries
2025-08-19 16:17:01,200:INFO:Copying training dataset
2025-08-19 16:17:01,225:INFO:Defining folds
2025-08-19 16:17:01,226:INFO:Declaring metric variables
2025-08-19 16:17:01,226:INFO:Importing untrained model
2025-08-19 16:17:01,226:INFO:Naive Bayes Imported successfully
2025-08-19 16:17:01,227:INFO:Starting cross validation
2025-08-19 16:17:01,229:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:02,787:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,793:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,825:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,847:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,856:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,872:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,886:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,903:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,906:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,945:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,951:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,972:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,973:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:02,983:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,037:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,043:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,046:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,047:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,063:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,097:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,102:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,138:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,164:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,167:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,173:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,229:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,233:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,407:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,450:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,497:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:03,566:INFO:Calculating mean and std
2025-08-19 16:17:03,569:INFO:Creating metrics dataframe
2025-08-19 16:17:03,572:INFO:Uploading results into container
2025-08-19 16:17:03,574:INFO:Uploading model into container now
2025-08-19 16:17:03,574:INFO:_master_model_container: 3
2025-08-19 16:17:03,574:INFO:_display_container: 2
2025-08-19 16:17:03,574:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-08-19 16:17:03,575:INFO:create_model() successfully completed......................................
2025-08-19 16:17:03,662:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:03,662:INFO:Creating metrics dataframe
2025-08-19 16:17:03,666:INFO:Initializing Decision Tree Classifier
2025-08-19 16:17:03,666:INFO:Total runtime is 0.7174195329348246 minutes
2025-08-19 16:17:03,666:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:03,666:INFO:Initializing create_model()
2025-08-19 16:17:03,666:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:03,666:INFO:Checking exceptions
2025-08-19 16:17:03,666:INFO:Importing libraries
2025-08-19 16:17:03,667:INFO:Copying training dataset
2025-08-19 16:17:03,686:INFO:Defining folds
2025-08-19 16:17:03,686:INFO:Declaring metric variables
2025-08-19 16:17:03,687:INFO:Importing untrained model
2025-08-19 16:17:03,688:INFO:Decision Tree Classifier Imported successfully
2025-08-19 16:17:03,688:INFO:Starting cross validation
2025-08-19 16:17:03,690:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:05,145:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,149:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,198:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,214:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,222:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,237:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,266:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,269:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,272:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,280:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,290:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,295:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,298:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,323:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,327:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,347:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,355:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,358:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,377:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,392:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,405:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,413:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,418:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,423:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,446:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,474:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,481:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,492:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,518:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,531:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:05,585:INFO:Calculating mean and std
2025-08-19 16:17:05,586:INFO:Creating metrics dataframe
2025-08-19 16:17:05,590:INFO:Uploading results into container
2025-08-19 16:17:05,590:INFO:Uploading model into container now
2025-08-19 16:17:05,591:INFO:_master_model_container: 4
2025-08-19 16:17:05,591:INFO:_display_container: 2
2025-08-19 16:17:05,591:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-19 16:17:05,591:INFO:create_model() successfully completed......................................
2025-08-19 16:17:05,677:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:05,677:INFO:Creating metrics dataframe
2025-08-19 16:17:05,681:INFO:Initializing SVM - Linear Kernel
2025-08-19 16:17:05,681:INFO:Total runtime is 0.7510129292805989 minutes
2025-08-19 16:17:05,681:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:05,682:INFO:Initializing create_model()
2025-08-19 16:17:05,682:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:05,682:INFO:Checking exceptions
2025-08-19 16:17:05,682:INFO:Importing libraries
2025-08-19 16:17:05,682:INFO:Copying training dataset
2025-08-19 16:17:05,703:INFO:Defining folds
2025-08-19 16:17:05,703:INFO:Declaring metric variables
2025-08-19 16:17:05,704:INFO:Importing untrained model
2025-08-19 16:17:05,705:INFO:SVM - Linear Kernel Imported successfully
2025-08-19 16:17:05,706:INFO:Starting cross validation
2025-08-19 16:17:05,708:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:08,174:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,232:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,295:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,301:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,353:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,407:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,502:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,544:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,551:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,587:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,609:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,628:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,633:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,636:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,653:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,669:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,680:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,688:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,700:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,710:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,719:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,728:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,731:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,737:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,761:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,762:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,794:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,802:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,819:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,848:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:08,890:INFO:Calculating mean and std
2025-08-19 16:17:08,891:INFO:Creating metrics dataframe
2025-08-19 16:17:08,893:INFO:Uploading results into container
2025-08-19 16:17:08,893:INFO:Uploading model into container now
2025-08-19 16:17:08,894:INFO:_master_model_container: 5
2025-08-19 16:17:08,894:INFO:_display_container: 2
2025-08-19 16:17:08,895:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-08-19 16:17:08,895:INFO:create_model() successfully completed......................................
2025-08-19 16:17:08,978:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:08,978:INFO:Creating metrics dataframe
2025-08-19 16:17:08,981:INFO:Initializing Ridge Classifier
2025-08-19 16:17:08,981:INFO:Total runtime is 0.8060003995895385 minutes
2025-08-19 16:17:08,981:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:08,981:INFO:Initializing create_model()
2025-08-19 16:17:08,981:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:08,982:INFO:Checking exceptions
2025-08-19 16:17:08,982:INFO:Importing libraries
2025-08-19 16:17:08,982:INFO:Copying training dataset
2025-08-19 16:17:09,003:INFO:Defining folds
2025-08-19 16:17:09,003:INFO:Declaring metric variables
2025-08-19 16:17:09,003:INFO:Importing untrained model
2025-08-19 16:17:09,004:INFO:Ridge Classifier Imported successfully
2025-08-19 16:17:09,005:INFO:Starting cross validation
2025-08-19 16:17:09,007:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:10,547:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,550:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,558:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,562:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,562:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,573:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,573:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,582:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,601:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,602:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,611:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,613:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,625:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,626:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,637:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,638:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,640:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,647:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,664:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,666:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,672:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,679:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,685:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,696:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,701:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,711:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,712:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,725:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,747:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:10,829:INFO:Calculating mean and std
2025-08-19 16:17:10,830:INFO:Creating metrics dataframe
2025-08-19 16:17:10,832:INFO:Uploading results into container
2025-08-19 16:17:10,833:INFO:Uploading model into container now
2025-08-19 16:17:10,833:INFO:_master_model_container: 6
2025-08-19 16:17:10,833:INFO:_display_container: 2
2025-08-19 16:17:10,834:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-08-19 16:17:10,834:INFO:create_model() successfully completed......................................
2025-08-19 16:17:10,924:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:10,924:INFO:Creating metrics dataframe
2025-08-19 16:17:10,928:INFO:Initializing Random Forest Classifier
2025-08-19 16:17:10,928:INFO:Total runtime is 0.838455327351888 minutes
2025-08-19 16:17:10,928:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:10,928:INFO:Initializing create_model()
2025-08-19 16:17:10,928:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:10,928:INFO:Checking exceptions
2025-08-19 16:17:10,928:INFO:Importing libraries
2025-08-19 16:17:10,928:INFO:Copying training dataset
2025-08-19 16:17:10,954:INFO:Defining folds
2025-08-19 16:17:10,954:INFO:Declaring metric variables
2025-08-19 16:17:10,955:INFO:Importing untrained model
2025-08-19 16:17:10,956:INFO:Random Forest Classifier Imported successfully
2025-08-19 16:17:10,957:INFO:Starting cross validation
2025-08-19 16:17:10,960:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:16,759:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,786:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,788:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,800:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,840:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,848:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,850:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,865:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,870:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,873:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,875:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,879:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,903:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,918:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,919:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,921:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,929:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,931:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,943:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,943:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,947:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,975:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,985:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,991:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,996:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:16,999:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:17,013:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:17,036:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:17,072:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:17,115:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:17,161:INFO:Calculating mean and std
2025-08-19 16:17:17,163:INFO:Creating metrics dataframe
2025-08-19 16:17:17,164:INFO:Uploading results into container
2025-08-19 16:17:17,165:INFO:Uploading model into container now
2025-08-19 16:17:17,166:INFO:_master_model_container: 7
2025-08-19 16:17:17,166:INFO:_display_container: 2
2025-08-19 16:17:17,168:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-08-19 16:17:17,168:INFO:create_model() successfully completed......................................
2025-08-19 16:17:17,249:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:17,249:INFO:Creating metrics dataframe
2025-08-19 16:17:17,253:INFO:Initializing Quadratic Discriminant Analysis
2025-08-19 16:17:17,253:INFO:Total runtime is 0.9438673138618469 minutes
2025-08-19 16:17:17,253:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:17,253:INFO:Initializing create_model()
2025-08-19 16:17:17,253:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:17,253:INFO:Checking exceptions
2025-08-19 16:17:17,253:INFO:Importing libraries
2025-08-19 16:17:17,253:INFO:Copying training dataset
2025-08-19 16:17:17,270:INFO:Defining folds
2025-08-19 16:17:17,270:INFO:Declaring metric variables
2025-08-19 16:17:17,271:INFO:Importing untrained model
2025-08-19 16:17:17,271:INFO:Quadratic Discriminant Analysis Imported successfully
2025-08-19 16:17:17,272:INFO:Starting cross validation
2025-08-19 16:17:17,273:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:18,737:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:18,738:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:18,739:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:18,743:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:18,740:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:18,746:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:18,934:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:19,145:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 16:17:19,319:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,331:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,331:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,343:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,365:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,366:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,372:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,374:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,376:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,388:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,392:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,400:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,410:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,414:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,417:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,421:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,424:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,438:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,440:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,441:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,451:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,462:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,473:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,473:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,478:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,483:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,508:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,518:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,523:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,562:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:19,616:INFO:Calculating mean and std
2025-08-19 16:17:19,618:INFO:Creating metrics dataframe
2025-08-19 16:17:19,621:INFO:Uploading results into container
2025-08-19 16:17:19,623:INFO:Uploading model into container now
2025-08-19 16:17:19,623:INFO:_master_model_container: 8
2025-08-19 16:17:19,624:INFO:_display_container: 2
2025-08-19 16:17:19,624:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-08-19 16:17:19,624:INFO:create_model() successfully completed......................................
2025-08-19 16:17:19,712:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:19,712:INFO:Creating metrics dataframe
2025-08-19 16:17:19,714:INFO:Initializing Ada Boost Classifier
2025-08-19 16:17:19,715:INFO:Total runtime is 0.9849091966946919 minutes
2025-08-19 16:17:19,715:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:19,715:INFO:Initializing create_model()
2025-08-19 16:17:19,715:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:19,716:INFO:Checking exceptions
2025-08-19 16:17:19,716:INFO:Importing libraries
2025-08-19 16:17:19,716:INFO:Copying training dataset
2025-08-19 16:17:19,734:INFO:Defining folds
2025-08-19 16:17:19,734:INFO:Declaring metric variables
2025-08-19 16:17:19,734:INFO:Importing untrained model
2025-08-19 16:17:19,735:INFO:Ada Boost Classifier Imported successfully
2025-08-19 16:17:19,735:INFO:Starting cross validation
2025-08-19 16:17:19,738:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:20,747:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,747:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,770:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,790:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,805:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,919:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,924:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,928:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,931:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:20,940:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 16:17:21,154:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,218:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,232:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,233:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,252:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,272:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,287:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,292:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,296:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,305:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,315:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,336:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,337:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,345:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,350:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,350:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,363:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,364:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,391:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,409:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,413:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,433:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,446:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,450:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,463:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,473:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,501:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,531:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:21,603:INFO:Calculating mean and std
2025-08-19 16:17:21,605:INFO:Creating metrics dataframe
2025-08-19 16:17:21,609:INFO:Uploading results into container
2025-08-19 16:17:21,610:INFO:Uploading model into container now
2025-08-19 16:17:21,611:INFO:_master_model_container: 9
2025-08-19 16:17:21,612:INFO:_display_container: 2
2025-08-19 16:17:21,612:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-08-19 16:17:21,612:INFO:create_model() successfully completed......................................
2025-08-19 16:17:21,721:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:21,721:INFO:Creating metrics dataframe
2025-08-19 16:17:21,727:INFO:Initializing Gradient Boosting Classifier
2025-08-19 16:17:21,727:INFO:Total runtime is 1.018434679508209 minutes
2025-08-19 16:17:21,727:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:21,728:INFO:Initializing create_model()
2025-08-19 16:17:21,728:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:21,729:INFO:Checking exceptions
2025-08-19 16:17:21,729:INFO:Importing libraries
2025-08-19 16:17:21,730:INFO:Copying training dataset
2025-08-19 16:17:21,756:INFO:Defining folds
2025-08-19 16:17:21,756:INFO:Declaring metric variables
2025-08-19 16:17:21,756:INFO:Importing untrained model
2025-08-19 16:17:21,757:INFO:Gradient Boosting Classifier Imported successfully
2025-08-19 16:17:21,757:INFO:Starting cross validation
2025-08-19 16:17:21,760:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:29,923:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:29,979:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,036:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,137:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,146:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,206:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,210:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,242:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,255:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,260:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,271:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,303:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,313:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,360:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,369:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,406:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,429:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,458:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,482:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,504:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,527:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,616:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,655:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,688:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,752:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,783:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,815:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,851:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,885:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,919:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:30,965:INFO:Calculating mean and std
2025-08-19 16:17:30,966:INFO:Creating metrics dataframe
2025-08-19 16:17:30,969:INFO:Uploading results into container
2025-08-19 16:17:30,970:INFO:Uploading model into container now
2025-08-19 16:17:30,970:INFO:_master_model_container: 10
2025-08-19 16:17:30,970:INFO:_display_container: 2
2025-08-19 16:17:30,971:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-08-19 16:17:30,971:INFO:create_model() successfully completed......................................
2025-08-19 16:17:31,052:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:31,052:INFO:Creating metrics dataframe
2025-08-19 16:17:31,056:INFO:Initializing Linear Discriminant Analysis
2025-08-19 16:17:31,056:INFO:Total runtime is 1.173921219507853 minutes
2025-08-19 16:17:31,056:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:31,056:INFO:Initializing create_model()
2025-08-19 16:17:31,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:31,057:INFO:Checking exceptions
2025-08-19 16:17:31,057:INFO:Importing libraries
2025-08-19 16:17:31,057:INFO:Copying training dataset
2025-08-19 16:17:31,074:INFO:Defining folds
2025-08-19 16:17:31,074:INFO:Declaring metric variables
2025-08-19 16:17:31,074:INFO:Importing untrained model
2025-08-19 16:17:31,074:INFO:Linear Discriminant Analysis Imported successfully
2025-08-19 16:17:31,075:INFO:Starting cross validation
2025-08-19 16:17:31,077:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:33,078:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,092:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,109:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,113:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,126:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,132:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,143:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,146:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,146:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,160:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,160:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,168:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,181:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,183:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,199:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,203:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,211:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,212:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,217:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,226:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,235:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,241:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,256:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,260:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,261:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,276:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,286:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,299:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,315:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,342:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:33,393:INFO:Calculating mean and std
2025-08-19 16:17:33,395:INFO:Creating metrics dataframe
2025-08-19 16:17:33,397:INFO:Uploading results into container
2025-08-19 16:17:33,397:INFO:Uploading model into container now
2025-08-19 16:17:33,397:INFO:_master_model_container: 11
2025-08-19 16:17:33,397:INFO:_display_container: 2
2025-08-19 16:17:33,398:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-08-19 16:17:33,398:INFO:create_model() successfully completed......................................
2025-08-19 16:17:33,471:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:33,471:INFO:Creating metrics dataframe
2025-08-19 16:17:33,474:INFO:Initializing Extra Trees Classifier
2025-08-19 16:17:33,474:INFO:Total runtime is 1.2142196575800577 minutes
2025-08-19 16:17:33,474:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:33,474:INFO:Initializing create_model()
2025-08-19 16:17:33,474:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:33,474:INFO:Checking exceptions
2025-08-19 16:17:33,474:INFO:Importing libraries
2025-08-19 16:17:33,475:INFO:Copying training dataset
2025-08-19 16:17:33,490:INFO:Defining folds
2025-08-19 16:17:33,490:INFO:Declaring metric variables
2025-08-19 16:17:33,490:INFO:Importing untrained model
2025-08-19 16:17:33,491:INFO:Extra Trees Classifier Imported successfully
2025-08-19 16:17:33,491:INFO:Starting cross validation
2025-08-19 16:17:33,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:44,059:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,167:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,220:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,226:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,236:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,246:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,377:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,390:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,400:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,401:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,413:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,426:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,432:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,458:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,473:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,484:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,488:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,491:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,496:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,508:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,564:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,577:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,597:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,604:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,633:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,640:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,742:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,795:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,826:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:44,881:INFO:Calculating mean and std
2025-08-19 16:17:44,883:INFO:Creating metrics dataframe
2025-08-19 16:17:44,887:INFO:Uploading results into container
2025-08-19 16:17:44,889:INFO:Uploading model into container now
2025-08-19 16:17:44,890:INFO:_master_model_container: 12
2025-08-19 16:17:44,890:INFO:_display_container: 2
2025-08-19 16:17:44,891:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-19 16:17:44,891:INFO:create_model() successfully completed......................................
2025-08-19 16:17:45,036:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:45,036:INFO:Creating metrics dataframe
2025-08-19 16:17:45,045:INFO:Initializing Light Gradient Boosting Machine
2025-08-19 16:17:45,045:INFO:Total runtime is 1.4070743958155314 minutes
2025-08-19 16:17:45,047:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:45,049:INFO:Initializing create_model()
2025-08-19 16:17:45,050:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:45,050:INFO:Checking exceptions
2025-08-19 16:17:45,050:INFO:Importing libraries
2025-08-19 16:17:45,050:INFO:Copying training dataset
2025-08-19 16:17:45,081:INFO:Defining folds
2025-08-19 16:17:45,081:INFO:Declaring metric variables
2025-08-19 16:17:45,082:INFO:Importing untrained model
2025-08-19 16:17:45,083:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 16:17:45,083:INFO:Starting cross validation
2025-08-19 16:17:45,086:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:48,483:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,541:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,542:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,605:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,607:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,667:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,683:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,743:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,801:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,866:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,931:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,949:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:48,999:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,009:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,049:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,065:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,108:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,154:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,170:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,214:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,257:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,267:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,313:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,371:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,407:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,462:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,487:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,517:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,543:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,578:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:49,627:INFO:Calculating mean and std
2025-08-19 16:17:49,627:INFO:Creating metrics dataframe
2025-08-19 16:17:49,631:INFO:Uploading results into container
2025-08-19 16:17:49,632:INFO:Uploading model into container now
2025-08-19 16:17:49,632:INFO:_master_model_container: 13
2025-08-19 16:17:49,632:INFO:_display_container: 2
2025-08-19 16:17:49,633:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-19 16:17:49,633:INFO:create_model() successfully completed......................................
2025-08-19 16:17:49,710:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:49,710:INFO:Creating metrics dataframe
2025-08-19 16:17:49,714:INFO:Initializing Dummy Classifier
2025-08-19 16:17:49,714:INFO:Total runtime is 1.484887957572937 minutes
2025-08-19 16:17:49,714:INFO:SubProcess create_model() called ==================================
2025-08-19 16:17:49,714:INFO:Initializing create_model()
2025-08-19 16:17:49,714:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019168734070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:49,714:INFO:Checking exceptions
2025-08-19 16:17:49,714:INFO:Importing libraries
2025-08-19 16:17:49,714:INFO:Copying training dataset
2025-08-19 16:17:49,730:INFO:Defining folds
2025-08-19 16:17:49,731:INFO:Declaring metric variables
2025-08-19 16:17:49,731:INFO:Importing untrained model
2025-08-19 16:17:49,731:INFO:Dummy Classifier Imported successfully
2025-08-19 16:17:49,731:INFO:Starting cross validation
2025-08-19 16:17:49,733:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:17:50,772:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,810:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,825:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,829:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,830:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,830:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,856:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,859:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,860:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,861:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,863:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,868:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,871:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,879:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,884:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,885:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,885:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,887:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,896:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,917:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,920:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,921:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,927:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,927:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,931:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,943:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,953:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,955:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,958:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,961:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,962:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,976:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,977:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 16:17:50,981:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,985:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:50,985:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:51,001:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 16:17:51,057:INFO:Calculating mean and std
2025-08-19 16:17:51,058:INFO:Creating metrics dataframe
2025-08-19 16:17:51,060:INFO:Uploading results into container
2025-08-19 16:17:51,061:INFO:Uploading model into container now
2025-08-19 16:17:51,061:INFO:_master_model_container: 14
2025-08-19 16:17:51,061:INFO:_display_container: 2
2025-08-19 16:17:51,061:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-08-19 16:17:51,062:INFO:create_model() successfully completed......................................
2025-08-19 16:17:51,130:INFO:SubProcess create_model() end ==================================
2025-08-19 16:17:51,130:INFO:Creating metrics dataframe
2025-08-19 16:17:51,234:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-08-19 16:17:51,236:INFO:Initializing create_model()
2025-08-19 16:17:51,236:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000191674689A0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:17:51,236:INFO:Checking exceptions
2025-08-19 16:17:51,237:INFO:Importing libraries
2025-08-19 16:17:51,237:INFO:Copying training dataset
2025-08-19 16:17:51,250:INFO:Defining folds
2025-08-19 16:17:51,250:INFO:Declaring metric variables
2025-08-19 16:17:51,250:INFO:Importing untrained model
2025-08-19 16:17:51,250:INFO:Declaring custom model
2025-08-19 16:17:51,251:INFO:Decision Tree Classifier Imported successfully
2025-08-19 16:17:51,253:INFO:Cross validation set to False
2025-08-19 16:17:51,253:INFO:Fitting Model
2025-08-19 16:17:51,557:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-19 16:17:51,557:INFO:create_model() successfully completed......................................
2025-08-19 16:17:51,629:INFO:_master_model_container: 14
2025-08-19 16:17:51,629:INFO:_display_container: 2
2025-08-19 16:17:51,629:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-19 16:17:51,629:INFO:compare_models() successfully completed......................................
2025-08-19 16:24:32,207:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:24:32,207:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:24:32,207:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:24:32,207:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 16:26:22,189:INFO:PyCaret RegressionExperiment
2025-08-19 16:26:22,190:INFO:Logging name: reg-default-name
2025-08-19 16:26:22,190:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-19 16:26:22,191:INFO:version 3.3.2
2025-08-19 16:26:22,191:INFO:Initializing setup()
2025-08-19 16:26:22,191:INFO:self.USI: b187
2025-08-19 16:26:22,191:INFO:self._variable_keys: {'transform_target_param', 'gpu_param', 'log_plots_param', 'USI', '_available_plots', 'data', 'y', 'X_train', 'gpu_n_jobs_param', 'idx', 'fold_groups_param', 'y_test', '_ml_usecase', 'X', 'n_jobs_param', 'memory', 'y_train', 'X_test', 'seed', 'html_param', 'fold_shuffle_param', 'fold_generator', 'exp_id', 'logging_param', 'exp_name_log', 'target_param', 'pipeline'}
2025-08-19 16:26:22,192:INFO:Checking environment
2025-08-19 16:26:22,193:INFO:python_version: 3.9.23
2025-08-19 16:26:22,194:INFO:python_build: ('main', 'Jun  5 2025 13:25:08')
2025-08-19 16:26:22,195:INFO:machine: AMD64
2025-08-19 16:26:22,240:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 16:26:22,246:INFO:Memory: svmem(total=17015848960, available=3861635072, percent=77.3, used=13154213888, free=3861635072)
2025-08-19 16:26:22,246:INFO:Physical Core: 6
2025-08-19 16:26:22,246:INFO:Logical Core: 12
2025-08-19 16:26:22,246:INFO:Checking libraries
2025-08-19 16:26:22,246:INFO:System:
2025-08-19 16:26:22,246:INFO:    python: 3.9.23 (main, Jun  5 2025, 13:25:08) [MSC v.1929 64 bit (AMD64)]
2025-08-19 16:26:22,246:INFO:executable: D:\Programming\My_works\conda_env\auto_ml\python.exe
2025-08-19 16:26:22,246:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 16:26:22,246:INFO:PyCaret required dependencies:
2025-08-19 16:26:22,713:INFO:                 pip: 25.1
2025-08-19 16:26:22,713:INFO:          setuptools: 78.1.1
2025-08-19 16:26:22,713:INFO:             pycaret: 3.3.2
2025-08-19 16:26:22,713:INFO:             IPython: 8.18.1
2025-08-19 16:26:22,713:INFO:          ipywidgets: 8.1.7
2025-08-19 16:26:22,714:INFO:                tqdm: 4.67.1
2025-08-19 16:26:22,714:INFO:               numpy: 1.26.4
2025-08-19 16:26:22,714:INFO:              pandas: 2.1.4
2025-08-19 16:26:22,714:INFO:              jinja2: 3.1.6
2025-08-19 16:26:22,714:INFO:               scipy: 1.11.4
2025-08-19 16:26:22,714:INFO:              joblib: 1.3.2
2025-08-19 16:26:22,714:INFO:             sklearn: 1.4.2
2025-08-19 16:26:22,714:INFO:                pyod: 2.0.5
2025-08-19 16:26:22,714:INFO:            imblearn: 0.12.4
2025-08-19 16:26:22,714:INFO:   category_encoders: 2.6.4
2025-08-19 16:26:22,714:INFO:            lightgbm: 4.6.0
2025-08-19 16:26:22,714:INFO:               numba: 0.60.0
2025-08-19 16:26:22,714:INFO:            requests: 2.32.5
2025-08-19 16:26:22,715:INFO:          matplotlib: 3.7.5
2025-08-19 16:26:22,715:INFO:          scikitplot: 0.3.7
2025-08-19 16:26:22,715:INFO:         yellowbrick: 1.5
2025-08-19 16:26:22,715:INFO:              plotly: 5.24.1
2025-08-19 16:26:22,715:INFO:    plotly-resampler: Not installed
2025-08-19 16:26:22,715:INFO:             kaleido: 1.0.0
2025-08-19 16:26:22,715:INFO:           schemdraw: 0.15
2025-08-19 16:26:22,715:INFO:         statsmodels: 0.14.5
2025-08-19 16:26:22,715:INFO:              sktime: 0.26.0
2025-08-19 16:26:22,715:INFO:               tbats: 1.1.3
2025-08-19 16:26:22,715:INFO:            pmdarima: 2.0.4
2025-08-19 16:26:22,715:INFO:              psutil: 6.1.0
2025-08-19 16:26:22,715:INFO:          markupsafe: 3.0.2
2025-08-19 16:26:22,716:INFO:             pickle5: Not installed
2025-08-19 16:26:22,716:INFO:         cloudpickle: 3.1.1
2025-08-19 16:26:22,716:INFO:         deprecation: 2.1.0
2025-08-19 16:26:22,716:INFO:              xxhash: 3.5.0
2025-08-19 16:26:22,716:INFO:           wurlitzer: Not installed
2025-08-19 16:26:22,716:INFO:PyCaret optional dependencies:
2025-08-19 16:26:23,514:INFO:                shap: Not installed
2025-08-19 16:26:23,514:INFO:           interpret: Not installed
2025-08-19 16:26:23,514:INFO:                umap: Not installed
2025-08-19 16:26:23,514:INFO:     ydata_profiling: Not installed
2025-08-19 16:26:23,514:INFO:  explainerdashboard: Not installed
2025-08-19 16:26:23,514:INFO:             autoviz: Not installed
2025-08-19 16:26:23,514:INFO:           fairlearn: Not installed
2025-08-19 16:26:23,514:INFO:          deepchecks: Not installed
2025-08-19 16:26:23,515:INFO:             xgboost: Not installed
2025-08-19 16:26:23,515:INFO:            catboost: Not installed
2025-08-19 16:26:23,515:INFO:              kmodes: Not installed
2025-08-19 16:26:23,515:INFO:             mlxtend: Not installed
2025-08-19 16:26:23,515:INFO:       statsforecast: Not installed
2025-08-19 16:26:23,515:INFO:        tune_sklearn: Not installed
2025-08-19 16:26:23,515:INFO:                 ray: Not installed
2025-08-19 16:26:23,515:INFO:            hyperopt: Not installed
2025-08-19 16:26:23,515:INFO:              optuna: Not installed
2025-08-19 16:26:23,515:INFO:               skopt: Not installed
2025-08-19 16:26:23,515:INFO:              mlflow: Not installed
2025-08-19 16:26:23,516:INFO:              gradio: Not installed
2025-08-19 16:26:23,516:INFO:             fastapi: 0.116.1
2025-08-19 16:26:23,516:INFO:             uvicorn: 0.35.0
2025-08-19 16:26:23,516:INFO:              m2cgen: Not installed
2025-08-19 16:26:23,516:INFO:           evidently: Not installed
2025-08-19 16:26:23,516:INFO:               fugue: Not installed
2025-08-19 16:26:23,516:INFO:           streamlit: 1.48.1
2025-08-19 16:26:23,517:INFO:             prophet: Not installed
2025-08-19 16:26:23,517:INFO:None
2025-08-19 16:26:23,517:INFO:Set up data.
2025-08-19 16:29:43,426:INFO:PyCaret RegressionExperiment
2025-08-19 16:29:43,427:INFO:Logging name: reg-default-name
2025-08-19 16:29:43,428:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-19 16:29:43,428:INFO:version 3.3.2
2025-08-19 16:29:43,429:INFO:Initializing setup()
2025-08-19 16:29:43,430:INFO:self.USI: e180
2025-08-19 16:29:43,430:INFO:self._variable_keys: {'transform_target_param', 'gpu_param', 'log_plots_param', 'USI', '_available_plots', 'data', 'y', 'X_train', 'gpu_n_jobs_param', 'idx', 'fold_groups_param', 'y_test', '_ml_usecase', 'X', 'n_jobs_param', 'memory', 'y_train', 'X_test', 'seed', 'html_param', 'fold_shuffle_param', 'fold_generator', 'exp_id', 'logging_param', 'exp_name_log', 'target_param', 'pipeline'}
2025-08-19 16:29:43,431:INFO:Checking environment
2025-08-19 16:29:43,432:INFO:python_version: 3.9.23
2025-08-19 16:29:43,432:INFO:python_build: ('main', 'Jun  5 2025 13:25:08')
2025-08-19 16:29:43,433:INFO:machine: AMD64
2025-08-19 16:29:43,433:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 16:29:43,443:INFO:Memory: svmem(total=17015848960, available=3655524352, percent=78.5, used=13360324608, free=3655524352)
2025-08-19 16:29:43,443:INFO:Physical Core: 6
2025-08-19 16:29:43,444:INFO:Logical Core: 12
2025-08-19 16:29:43,445:INFO:Checking libraries
2025-08-19 16:29:43,446:INFO:System:
2025-08-19 16:29:43,446:INFO:    python: 3.9.23 (main, Jun  5 2025, 13:25:08) [MSC v.1929 64 bit (AMD64)]
2025-08-19 16:29:43,447:INFO:executable: D:\Programming\My_works\conda_env\auto_ml\python.exe
2025-08-19 16:29:43,447:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 16:29:43,448:INFO:PyCaret required dependencies:
2025-08-19 16:29:43,448:INFO:                 pip: 25.1
2025-08-19 16:29:43,449:INFO:          setuptools: 78.1.1
2025-08-19 16:29:43,449:INFO:             pycaret: 3.3.2
2025-08-19 16:29:43,450:INFO:             IPython: 8.18.1
2025-08-19 16:29:43,450:INFO:          ipywidgets: 8.1.7
2025-08-19 16:29:43,451:INFO:                tqdm: 4.67.1
2025-08-19 16:29:43,451:INFO:               numpy: 1.26.4
2025-08-19 16:29:43,451:INFO:              pandas: 2.1.4
2025-08-19 16:29:43,451:INFO:              jinja2: 3.1.6
2025-08-19 16:29:43,452:INFO:               scipy: 1.11.4
2025-08-19 16:29:43,452:INFO:              joblib: 1.3.2
2025-08-19 16:29:43,453:INFO:             sklearn: 1.4.2
2025-08-19 16:29:43,453:INFO:                pyod: 2.0.5
2025-08-19 16:29:43,453:INFO:            imblearn: 0.12.4
2025-08-19 16:29:43,453:INFO:   category_encoders: 2.6.4
2025-08-19 16:29:43,454:INFO:            lightgbm: 4.6.0
2025-08-19 16:29:43,454:INFO:               numba: 0.60.0
2025-08-19 16:29:43,455:INFO:            requests: 2.32.5
2025-08-19 16:29:43,455:INFO:          matplotlib: 3.7.5
2025-08-19 16:29:43,456:INFO:          scikitplot: 0.3.7
2025-08-19 16:29:43,457:INFO:         yellowbrick: 1.5
2025-08-19 16:29:43,458:INFO:              plotly: 5.24.1
2025-08-19 16:29:43,459:INFO:    plotly-resampler: Not installed
2025-08-19 16:29:43,460:INFO:             kaleido: 1.0.0
2025-08-19 16:29:43,461:INFO:           schemdraw: 0.15
2025-08-19 16:29:43,461:INFO:         statsmodels: 0.14.5
2025-08-19 16:29:43,461:INFO:              sktime: 0.26.0
2025-08-19 16:29:43,462:INFO:               tbats: 1.1.3
2025-08-19 16:29:43,462:INFO:            pmdarima: 2.0.4
2025-08-19 16:29:43,463:INFO:              psutil: 6.1.0
2025-08-19 16:29:43,463:INFO:          markupsafe: 3.0.2
2025-08-19 16:29:43,463:INFO:             pickle5: Not installed
2025-08-19 16:29:43,463:INFO:         cloudpickle: 3.1.1
2025-08-19 16:29:43,463:INFO:         deprecation: 2.1.0
2025-08-19 16:29:43,464:INFO:              xxhash: 3.5.0
2025-08-19 16:29:43,464:INFO:           wurlitzer: Not installed
2025-08-19 16:29:43,464:INFO:PyCaret optional dependencies:
2025-08-19 16:29:43,465:INFO:                shap: Not installed
2025-08-19 16:29:43,465:INFO:           interpret: Not installed
2025-08-19 16:29:43,466:INFO:                umap: Not installed
2025-08-19 16:29:43,466:INFO:     ydata_profiling: Not installed
2025-08-19 16:29:43,466:INFO:  explainerdashboard: Not installed
2025-08-19 16:29:43,466:INFO:             autoviz: Not installed
2025-08-19 16:29:43,466:INFO:           fairlearn: Not installed
2025-08-19 16:29:43,467:INFO:          deepchecks: Not installed
2025-08-19 16:29:43,468:INFO:             xgboost: Not installed
2025-08-19 16:29:43,468:INFO:            catboost: Not installed
2025-08-19 16:29:43,468:INFO:              kmodes: Not installed
2025-08-19 16:29:43,468:INFO:             mlxtend: Not installed
2025-08-19 16:29:43,469:INFO:       statsforecast: Not installed
2025-08-19 16:29:43,470:INFO:        tune_sklearn: Not installed
2025-08-19 16:29:43,471:INFO:                 ray: Not installed
2025-08-19 16:29:43,471:INFO:            hyperopt: Not installed
2025-08-19 16:29:43,471:INFO:              optuna: Not installed
2025-08-19 16:29:43,472:INFO:               skopt: Not installed
2025-08-19 16:29:43,473:INFO:              mlflow: Not installed
2025-08-19 16:29:43,473:INFO:              gradio: Not installed
2025-08-19 16:29:43,474:INFO:             fastapi: 0.116.1
2025-08-19 16:29:43,474:INFO:             uvicorn: 0.35.0
2025-08-19 16:29:43,474:INFO:              m2cgen: Not installed
2025-08-19 16:29:43,475:INFO:           evidently: Not installed
2025-08-19 16:29:43,475:INFO:               fugue: Not installed
2025-08-19 16:29:43,476:INFO:           streamlit: 1.48.1
2025-08-19 16:29:43,476:INFO:             prophet: Not installed
2025-08-19 16:29:43,477:INFO:None
2025-08-19 16:29:43,478:INFO:Set up data.
2025-08-19 16:29:43,859:INFO:Set up folding strategy.
2025-08-19 16:29:43,859:INFO:Set up train/test split.
2025-08-19 16:29:43,940:INFO:Set up index.
2025-08-19 16:29:43,941:INFO:Assigning column types.
2025-08-19 16:29:43,968:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-19 16:29:43,968:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-19 16:29:43,977:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:29:43,984:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,088:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,136:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,137:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,138:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,138:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,143:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,149:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,219:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,262:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,262:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,263:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-08-19 16:29:44,267:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,272:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,342:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,389:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,390:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,395:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,399:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,508:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,592:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,593:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,595:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-08-19 16:29:44,614:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,746:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,824:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,826:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,826:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:44,844:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:29:44,981:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,073:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,075:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,075:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,076:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-08-19 16:29:45,269:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,338:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,339:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,426:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,490:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,492:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,492:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,493:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-19 16:29:45,587:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,747:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:29:45,793:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,793:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,793:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-08-19 16:29:45,923:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:45,924:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:46,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:46,063:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:46,066:INFO:Preparing preprocessing pipeline...
2025-08-19 16:29:46,066:INFO:Set up simple imputation.
2025-08-19 16:29:46,081:INFO:Set up encoding of categorical features.
2025-08-19 16:29:46,084:INFO:Set up column name cleaning.
2025-08-19 16:29:46,494:INFO:Finished creating preprocessing pipeline.
2025-08-19 16:29:46,501:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Public\Documents\ESTsoft\CreatorTemp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['sp500 open', 'sp500 high',
                                             'sp500 low', 'sp500 close',
                                             'sp500 volume', 'sp500 high-low',
                                             'nasdaq open', 'nasdaq high',
                                             'nasdaq low', 'nasdaq close',
                                             'nasdaq volume', 'nasdaq high-low',
                                             'us_rates_%', 'CPI', 'usd_chf',
                                             'eur_usd', 'GD...
                                             'platinum open', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['date'],
                                    transformer=TargetEncoder(cols=['date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-08-19 16:29:46,502:INFO:Creating final display dataframe.
2025-08-19 16:29:46,895:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         gold high
2                   Target type        Regression
3           Original data shape        (3719, 47)
4        Transformed data shape        (3719, 47)
5   Transformed train set shape        (2603, 47)
6    Transformed test set shape        (1116, 47)
7              Numeric features                45
8          Categorical features                 1
9      Rows with missing values             99.2%
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator             KFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  reg-default-name
22                          USI              e180
2025-08-19 16:29:47,061:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:47,061:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:47,214:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:47,215:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:29:47,216:INFO:setup() successfully completed in 3.81s...............
2025-08-19 16:29:47,216:INFO:Initializing compare_models()
2025-08-19 16:29:47,217:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-08-19 16:29:47,217:INFO:Checking exceptions
2025-08-19 16:29:47,226:INFO:Preparing display monitor
2025-08-19 16:29:47,229:INFO:Initializing Linear Regression
2025-08-19 16:29:47,229:INFO:Total runtime is 0.0 minutes
2025-08-19 16:29:47,230:INFO:SubProcess create_model() called ==================================
2025-08-19 16:29:47,230:INFO:Initializing create_model()
2025-08-19 16:29:47,230:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:29:47,230:INFO:Checking exceptions
2025-08-19 16:29:47,230:INFO:Importing libraries
2025-08-19 16:29:47,230:INFO:Copying training dataset
2025-08-19 16:29:47,247:INFO:Defining folds
2025-08-19 16:29:47,248:INFO:Declaring metric variables
2025-08-19 16:29:47,248:INFO:Importing untrained model
2025-08-19 16:29:47,248:INFO:Linear Regression Imported successfully
2025-08-19 16:29:47,248:INFO:Starting cross validation
2025-08-19 16:29:47,277:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:29:59,771:INFO:Calculating mean and std
2025-08-19 16:29:59,777:INFO:Creating metrics dataframe
2025-08-19 16:29:59,786:INFO:Uploading results into container
2025-08-19 16:29:59,788:INFO:Uploading model into container now
2025-08-19 16:29:59,789:INFO:_master_model_container: 1
2025-08-19 16:29:59,790:INFO:_display_container: 2
2025-08-19 16:29:59,790:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:29:59,791:INFO:create_model() successfully completed......................................
2025-08-19 16:29:59,964:INFO:SubProcess create_model() end ==================================
2025-08-19 16:29:59,964:INFO:Creating metrics dataframe
2025-08-19 16:29:59,968:INFO:Initializing Lasso Regression
2025-08-19 16:29:59,969:INFO:Total runtime is 0.2123358647028605 minutes
2025-08-19 16:29:59,969:INFO:SubProcess create_model() called ==================================
2025-08-19 16:29:59,970:INFO:Initializing create_model()
2025-08-19 16:29:59,970:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:29:59,970:INFO:Checking exceptions
2025-08-19 16:29:59,970:INFO:Importing libraries
2025-08-19 16:29:59,970:INFO:Copying training dataset
2025-08-19 16:29:59,988:INFO:Defining folds
2025-08-19 16:29:59,989:INFO:Declaring metric variables
2025-08-19 16:29:59,989:INFO:Importing untrained model
2025-08-19 16:29:59,989:INFO:Lasso Regression Imported successfully
2025-08-19 16:29:59,989:INFO:Starting cross validation
2025-08-19 16:29:59,991:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:00,263:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.562e+03, tolerance: 2.024e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,304:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.552e+03, tolerance: 2.048e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,342:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.558e+03, tolerance: 2.039e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,344:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.561e+03, tolerance: 2.016e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,365:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.555e+03, tolerance: 2.022e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,381:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.560e+03, tolerance: 2.050e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,384:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.561e+03, tolerance: 1.994e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:00,398:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.553e+03, tolerance: 2.003e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:04,654:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.558e+03, tolerance: 2.020e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:04,676:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.554e+03, tolerance: 2.029e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:04,716:INFO:Calculating mean and std
2025-08-19 16:30:04,716:INFO:Creating metrics dataframe
2025-08-19 16:30:04,719:INFO:Uploading results into container
2025-08-19 16:30:04,720:INFO:Uploading model into container now
2025-08-19 16:30:04,721:INFO:_master_model_container: 2
2025-08-19 16:30:04,721:INFO:_display_container: 2
2025-08-19 16:30:04,721:INFO:Lasso(random_state=123)
2025-08-19 16:30:04,721:INFO:create_model() successfully completed......................................
2025-08-19 16:30:04,857:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:04,858:INFO:Creating metrics dataframe
2025-08-19 16:30:04,865:INFO:Initializing Ridge Regression
2025-08-19 16:30:04,865:INFO:Total runtime is 0.293941322962443 minutes
2025-08-19 16:30:04,865:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:04,866:INFO:Initializing create_model()
2025-08-19 16:30:04,866:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:04,866:INFO:Checking exceptions
2025-08-19 16:30:04,867:INFO:Importing libraries
2025-08-19 16:30:04,867:INFO:Copying training dataset
2025-08-19 16:30:04,887:INFO:Defining folds
2025-08-19 16:30:04,887:INFO:Declaring metric variables
2025-08-19 16:30:04,887:INFO:Importing untrained model
2025-08-19 16:30:04,888:INFO:Ridge Regression Imported successfully
2025-08-19 16:30:04,888:INFO:Starting cross validation
2025-08-19 16:30:04,889:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:05,121:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.60711e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,122:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.616e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,122:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.4311e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,122:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.50975e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,123:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.45882e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,123:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.73556e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,123:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.464e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,123:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.65045e-20): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 16:30:05,186:INFO:Calculating mean and std
2025-08-19 16:30:05,188:INFO:Creating metrics dataframe
2025-08-19 16:30:05,191:INFO:Uploading results into container
2025-08-19 16:30:05,191:INFO:Uploading model into container now
2025-08-19 16:30:05,192:INFO:_master_model_container: 3
2025-08-19 16:30:05,192:INFO:_display_container: 2
2025-08-19 16:30:05,193:INFO:Ridge(random_state=123)
2025-08-19 16:30:05,193:INFO:create_model() successfully completed......................................
2025-08-19 16:30:05,264:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:05,264:INFO:Creating metrics dataframe
2025-08-19 16:30:05,267:INFO:Initializing Elastic Net
2025-08-19 16:30:05,268:INFO:Total runtime is 0.30064862569173173 minutes
2025-08-19 16:30:05,268:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:05,268:INFO:Initializing create_model()
2025-08-19 16:30:05,268:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:05,268:INFO:Checking exceptions
2025-08-19 16:30:05,268:INFO:Importing libraries
2025-08-19 16:30:05,268:INFO:Copying training dataset
2025-08-19 16:30:05,286:INFO:Defining folds
2025-08-19 16:30:05,286:INFO:Declaring metric variables
2025-08-19 16:30:05,286:INFO:Importing untrained model
2025-08-19 16:30:05,287:INFO:Elastic Net Imported successfully
2025-08-19 16:30:05,287:INFO:Starting cross validation
2025-08-19 16:30:05,289:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:05,605:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.581e+03, tolerance: 2.029e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,612:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.583e+03, tolerance: 2.020e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,631:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.587e+03, tolerance: 2.024e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,648:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.575e+03, tolerance: 2.048e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,668:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.582e+03, tolerance: 2.039e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,677:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.586e+03, tolerance: 2.016e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,693:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.579e+03, tolerance: 2.022e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,693:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.584e+03, tolerance: 1.994e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,712:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.579e+03, tolerance: 2.003e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,715:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.583e+03, tolerance: 2.050e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:05,798:INFO:Calculating mean and std
2025-08-19 16:30:05,799:INFO:Creating metrics dataframe
2025-08-19 16:30:05,802:INFO:Uploading results into container
2025-08-19 16:30:05,803:INFO:Uploading model into container now
2025-08-19 16:30:05,804:INFO:_master_model_container: 4
2025-08-19 16:30:05,804:INFO:_display_container: 2
2025-08-19 16:30:05,804:INFO:ElasticNet(random_state=123)
2025-08-19 16:30:05,804:INFO:create_model() successfully completed......................................
2025-08-19 16:30:05,882:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:05,882:INFO:Creating metrics dataframe
2025-08-19 16:30:05,885:INFO:Initializing Least Angle Regression
2025-08-19 16:30:05,886:INFO:Total runtime is 0.31095178922017414 minutes
2025-08-19 16:30:05,886:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:05,886:INFO:Initializing create_model()
2025-08-19 16:30:05,886:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:05,887:INFO:Checking exceptions
2025-08-19 16:30:05,887:INFO:Importing libraries
2025-08-19 16:30:05,887:INFO:Copying training dataset
2025-08-19 16:30:05,903:INFO:Defining folds
2025-08-19 16:30:05,903:INFO:Declaring metric variables
2025-08-19 16:30:05,903:INFO:Importing untrained model
2025-08-19 16:30:05,903:INFO:Least Angle Regression Imported successfully
2025-08-19 16:30:05,904:INFO:Starting cross validation
2025-08-19 16:30:05,906:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:06,329:INFO:Calculating mean and std
2025-08-19 16:30:06,330:INFO:Creating metrics dataframe
2025-08-19 16:30:06,333:INFO:Uploading results into container
2025-08-19 16:30:06,334:INFO:Uploading model into container now
2025-08-19 16:30:06,335:INFO:_master_model_container: 5
2025-08-19 16:30:06,335:INFO:_display_container: 2
2025-08-19 16:30:06,335:INFO:Lars(random_state=123)
2025-08-19 16:30:06,336:INFO:create_model() successfully completed......................................
2025-08-19 16:30:06,411:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:06,411:INFO:Creating metrics dataframe
2025-08-19 16:30:06,414:INFO:Initializing Lasso Least Angle Regression
2025-08-19 16:30:06,414:INFO:Total runtime is 0.3197497208913167 minutes
2025-08-19 16:30:06,414:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:06,414:INFO:Initializing create_model()
2025-08-19 16:30:06,414:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:06,414:INFO:Checking exceptions
2025-08-19 16:30:06,415:INFO:Importing libraries
2025-08-19 16:30:06,415:INFO:Copying training dataset
2025-08-19 16:30:06,430:INFO:Defining folds
2025-08-19 16:30:06,431:INFO:Declaring metric variables
2025-08-19 16:30:06,431:INFO:Importing untrained model
2025-08-19 16:30:06,431:INFO:Lasso Least Angle Regression Imported successfully
2025-08-19 16:30:06,432:INFO:Starting cross validation
2025-08-19 16:30:06,434:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:06,691:INFO:Calculating mean and std
2025-08-19 16:30:06,692:INFO:Creating metrics dataframe
2025-08-19 16:30:06,695:INFO:Uploading results into container
2025-08-19 16:30:06,696:INFO:Uploading model into container now
2025-08-19 16:30:06,697:INFO:_master_model_container: 6
2025-08-19 16:30:06,697:INFO:_display_container: 2
2025-08-19 16:30:06,698:INFO:LassoLars(random_state=123)
2025-08-19 16:30:06,698:INFO:create_model() successfully completed......................................
2025-08-19 16:30:06,782:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:06,782:INFO:Creating metrics dataframe
2025-08-19 16:30:06,785:INFO:Initializing Orthogonal Matching Pursuit
2025-08-19 16:30:06,785:INFO:Total runtime is 0.3259323358535766 minutes
2025-08-19 16:30:06,785:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:06,785:INFO:Initializing create_model()
2025-08-19 16:30:06,785:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:06,785:INFO:Checking exceptions
2025-08-19 16:30:06,785:INFO:Importing libraries
2025-08-19 16:30:06,786:INFO:Copying training dataset
2025-08-19 16:30:06,800:INFO:Defining folds
2025-08-19 16:30:06,800:INFO:Declaring metric variables
2025-08-19 16:30:06,800:INFO:Importing untrained model
2025-08-19 16:30:06,800:INFO:Orthogonal Matching Pursuit Imported successfully
2025-08-19 16:30:06,801:INFO:Starting cross validation
2025-08-19 16:30:06,802:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:07,025:INFO:Calculating mean and std
2025-08-19 16:30:07,026:INFO:Creating metrics dataframe
2025-08-19 16:30:07,028:INFO:Uploading results into container
2025-08-19 16:30:07,029:INFO:Uploading model into container now
2025-08-19 16:30:07,030:INFO:_master_model_container: 7
2025-08-19 16:30:07,030:INFO:_display_container: 2
2025-08-19 16:30:07,030:INFO:OrthogonalMatchingPursuit()
2025-08-19 16:30:07,030:INFO:create_model() successfully completed......................................
2025-08-19 16:30:07,099:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:07,099:INFO:Creating metrics dataframe
2025-08-19 16:30:07,103:INFO:Initializing Bayesian Ridge
2025-08-19 16:30:07,103:INFO:Total runtime is 0.3312378088633219 minutes
2025-08-19 16:30:07,103:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:07,104:INFO:Initializing create_model()
2025-08-19 16:30:07,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:07,104:INFO:Checking exceptions
2025-08-19 16:30:07,104:INFO:Importing libraries
2025-08-19 16:30:07,104:INFO:Copying training dataset
2025-08-19 16:30:07,118:INFO:Defining folds
2025-08-19 16:30:07,118:INFO:Declaring metric variables
2025-08-19 16:30:07,118:INFO:Importing untrained model
2025-08-19 16:30:07,119:INFO:Bayesian Ridge Imported successfully
2025-08-19 16:30:07,119:INFO:Starting cross validation
2025-08-19 16:30:07,120:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:07,418:INFO:Calculating mean and std
2025-08-19 16:30:07,420:INFO:Creating metrics dataframe
2025-08-19 16:30:07,422:INFO:Uploading results into container
2025-08-19 16:30:07,423:INFO:Uploading model into container now
2025-08-19 16:30:07,423:INFO:_master_model_container: 8
2025-08-19 16:30:07,423:INFO:_display_container: 2
2025-08-19 16:30:07,424:INFO:BayesianRidge()
2025-08-19 16:30:07,424:INFO:create_model() successfully completed......................................
2025-08-19 16:30:07,501:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:07,501:INFO:Creating metrics dataframe
2025-08-19 16:30:07,505:INFO:Initializing Passive Aggressive Regressor
2025-08-19 16:30:07,505:INFO:Total runtime is 0.33793482780456535 minutes
2025-08-19 16:30:07,506:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:07,506:INFO:Initializing create_model()
2025-08-19 16:30:07,506:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:07,506:INFO:Checking exceptions
2025-08-19 16:30:07,506:INFO:Importing libraries
2025-08-19 16:30:07,506:INFO:Copying training dataset
2025-08-19 16:30:07,521:INFO:Defining folds
2025-08-19 16:30:07,521:INFO:Declaring metric variables
2025-08-19 16:30:07,521:INFO:Importing untrained model
2025-08-19 16:30:07,522:INFO:Passive Aggressive Regressor Imported successfully
2025-08-19 16:30:07,522:INFO:Starting cross validation
2025-08-19 16:30:07,524:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:07,813:INFO:Calculating mean and std
2025-08-19 16:30:07,814:INFO:Creating metrics dataframe
2025-08-19 16:30:07,816:INFO:Uploading results into container
2025-08-19 16:30:07,817:INFO:Uploading model into container now
2025-08-19 16:30:07,817:INFO:_master_model_container: 9
2025-08-19 16:30:07,817:INFO:_display_container: 2
2025-08-19 16:30:07,818:INFO:PassiveAggressiveRegressor(random_state=123)
2025-08-19 16:30:07,818:INFO:create_model() successfully completed......................................
2025-08-19 16:30:07,895:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:07,895:INFO:Creating metrics dataframe
2025-08-19 16:30:07,898:INFO:Initializing Huber Regressor
2025-08-19 16:30:07,898:INFO:Total runtime is 0.34447755416234327 minutes
2025-08-19 16:30:07,898:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:07,898:INFO:Initializing create_model()
2025-08-19 16:30:07,898:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:07,898:INFO:Checking exceptions
2025-08-19 16:30:07,898:INFO:Importing libraries
2025-08-19 16:30:07,898:INFO:Copying training dataset
2025-08-19 16:30:07,911:INFO:Defining folds
2025-08-19 16:30:07,911:INFO:Declaring metric variables
2025-08-19 16:30:07,911:INFO:Importing untrained model
2025-08-19 16:30:07,911:INFO:Huber Regressor Imported successfully
2025-08-19 16:30:07,911:INFO:Starting cross validation
2025-08-19 16:30:07,913:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:08,274:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,291:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,294:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,333:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,338:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,349:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,354:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,360:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,387:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,394:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:30:08,423:INFO:Calculating mean and std
2025-08-19 16:30:08,425:INFO:Creating metrics dataframe
2025-08-19 16:30:08,430:INFO:Uploading results into container
2025-08-19 16:30:08,430:INFO:Uploading model into container now
2025-08-19 16:30:08,431:INFO:_master_model_container: 10
2025-08-19 16:30:08,431:INFO:_display_container: 2
2025-08-19 16:30:08,432:INFO:HuberRegressor()
2025-08-19 16:30:08,432:INFO:create_model() successfully completed......................................
2025-08-19 16:30:08,525:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:08,525:INFO:Creating metrics dataframe
2025-08-19 16:30:08,530:INFO:Initializing K Neighbors Regressor
2025-08-19 16:30:08,531:INFO:Total runtime is 0.3550308148066202 minutes
2025-08-19 16:30:08,531:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:08,531:INFO:Initializing create_model()
2025-08-19 16:30:08,531:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:08,531:INFO:Checking exceptions
2025-08-19 16:30:08,532:INFO:Importing libraries
2025-08-19 16:30:08,532:INFO:Copying training dataset
2025-08-19 16:30:08,547:INFO:Defining folds
2025-08-19 16:30:08,547:INFO:Declaring metric variables
2025-08-19 16:30:08,547:INFO:Importing untrained model
2025-08-19 16:30:08,547:INFO:K Neighbors Regressor Imported successfully
2025-08-19 16:30:08,548:INFO:Starting cross validation
2025-08-19 16:30:08,549:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:09,278:INFO:Calculating mean and std
2025-08-19 16:30:09,278:INFO:Creating metrics dataframe
2025-08-19 16:30:09,281:INFO:Uploading results into container
2025-08-19 16:30:09,281:INFO:Uploading model into container now
2025-08-19 16:30:09,281:INFO:_master_model_container: 11
2025-08-19 16:30:09,281:INFO:_display_container: 2
2025-08-19 16:30:09,282:INFO:KNeighborsRegressor(n_jobs=-1)
2025-08-19 16:30:09,282:INFO:create_model() successfully completed......................................
2025-08-19 16:30:09,352:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:09,352:INFO:Creating metrics dataframe
2025-08-19 16:30:09,355:INFO:Initializing Decision Tree Regressor
2025-08-19 16:30:09,356:INFO:Total runtime is 0.3687861680984496 minutes
2025-08-19 16:30:09,356:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:09,356:INFO:Initializing create_model()
2025-08-19 16:30:09,357:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:09,357:INFO:Checking exceptions
2025-08-19 16:30:09,357:INFO:Importing libraries
2025-08-19 16:30:09,357:INFO:Copying training dataset
2025-08-19 16:30:09,370:INFO:Defining folds
2025-08-19 16:30:09,370:INFO:Declaring metric variables
2025-08-19 16:30:09,370:INFO:Importing untrained model
2025-08-19 16:30:09,371:INFO:Decision Tree Regressor Imported successfully
2025-08-19 16:30:09,371:INFO:Starting cross validation
2025-08-19 16:30:09,372:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:10,026:INFO:Calculating mean and std
2025-08-19 16:30:10,028:INFO:Creating metrics dataframe
2025-08-19 16:30:10,030:INFO:Uploading results into container
2025-08-19 16:30:10,031:INFO:Uploading model into container now
2025-08-19 16:30:10,031:INFO:_master_model_container: 12
2025-08-19 16:30:10,032:INFO:_display_container: 2
2025-08-19 16:30:10,033:INFO:DecisionTreeRegressor(random_state=123)
2025-08-19 16:30:10,033:INFO:create_model() successfully completed......................................
2025-08-19 16:30:10,111:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:10,112:INFO:Creating metrics dataframe
2025-08-19 16:30:10,117:INFO:Initializing Random Forest Regressor
2025-08-19 16:30:10,117:INFO:Total runtime is 0.38146804173787424 minutes
2025-08-19 16:30:10,118:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:10,118:INFO:Initializing create_model()
2025-08-19 16:30:10,118:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:10,118:INFO:Checking exceptions
2025-08-19 16:30:10,118:INFO:Importing libraries
2025-08-19 16:30:10,118:INFO:Copying training dataset
2025-08-19 16:30:10,143:INFO:Defining folds
2025-08-19 16:30:10,143:INFO:Declaring metric variables
2025-08-19 16:30:10,144:INFO:Importing untrained model
2025-08-19 16:30:10,145:INFO:Random Forest Regressor Imported successfully
2025-08-19 16:30:10,145:INFO:Starting cross validation
2025-08-19 16:30:10,147:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:25,446:INFO:Calculating mean and std
2025-08-19 16:30:25,449:INFO:Creating metrics dataframe
2025-08-19 16:30:25,452:INFO:Uploading results into container
2025-08-19 16:30:25,454:INFO:Uploading model into container now
2025-08-19 16:30:25,455:INFO:_master_model_container: 13
2025-08-19 16:30:25,456:INFO:_display_container: 2
2025-08-19 16:30:25,456:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:30:25,456:INFO:create_model() successfully completed......................................
2025-08-19 16:30:25,571:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:25,571:INFO:Creating metrics dataframe
2025-08-19 16:30:25,576:INFO:Initializing Extra Trees Regressor
2025-08-19 16:30:25,576:INFO:Total runtime is 0.6391108155250549 minutes
2025-08-19 16:30:25,576:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:25,576:INFO:Initializing create_model()
2025-08-19 16:30:25,576:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:25,576:INFO:Checking exceptions
2025-08-19 16:30:25,577:INFO:Importing libraries
2025-08-19 16:30:25,577:INFO:Copying training dataset
2025-08-19 16:30:25,602:INFO:Defining folds
2025-08-19 16:30:25,602:INFO:Declaring metric variables
2025-08-19 16:30:25,602:INFO:Importing untrained model
2025-08-19 16:30:25,603:INFO:Extra Trees Regressor Imported successfully
2025-08-19 16:30:25,603:INFO:Starting cross validation
2025-08-19 16:30:25,605:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:32,507:INFO:Calculating mean and std
2025-08-19 16:30:32,511:INFO:Creating metrics dataframe
2025-08-19 16:30:32,521:INFO:Uploading results into container
2025-08-19 16:30:32,522:INFO:Uploading model into container now
2025-08-19 16:30:32,524:INFO:_master_model_container: 14
2025-08-19 16:30:32,524:INFO:_display_container: 2
2025-08-19 16:30:32,525:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:30:32,525:INFO:create_model() successfully completed......................................
2025-08-19 16:30:32,773:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:32,774:INFO:Creating metrics dataframe
2025-08-19 16:30:32,784:INFO:Initializing AdaBoost Regressor
2025-08-19 16:30:32,784:INFO:Total runtime is 0.7592550794283548 minutes
2025-08-19 16:30:32,785:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:32,785:INFO:Initializing create_model()
2025-08-19 16:30:32,785:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:32,785:INFO:Checking exceptions
2025-08-19 16:30:32,786:INFO:Importing libraries
2025-08-19 16:30:32,786:INFO:Copying training dataset
2025-08-19 16:30:32,826:INFO:Defining folds
2025-08-19 16:30:32,826:INFO:Declaring metric variables
2025-08-19 16:30:32,827:INFO:Importing untrained model
2025-08-19 16:30:32,828:INFO:AdaBoost Regressor Imported successfully
2025-08-19 16:30:32,829:INFO:Starting cross validation
2025-08-19 16:30:32,833:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:37,963:INFO:Calculating mean and std
2025-08-19 16:30:37,964:INFO:Creating metrics dataframe
2025-08-19 16:30:37,966:INFO:Uploading results into container
2025-08-19 16:30:37,967:INFO:Uploading model into container now
2025-08-19 16:30:37,967:INFO:_master_model_container: 15
2025-08-19 16:30:37,967:INFO:_display_container: 2
2025-08-19 16:30:37,967:INFO:AdaBoostRegressor(random_state=123)
2025-08-19 16:30:37,967:INFO:create_model() successfully completed......................................
2025-08-19 16:30:38,047:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:38,048:INFO:Creating metrics dataframe
2025-08-19 16:30:38,051:INFO:Initializing Gradient Boosting Regressor
2025-08-19 16:30:38,051:INFO:Total runtime is 0.8470420360565185 minutes
2025-08-19 16:30:38,051:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:38,052:INFO:Initializing create_model()
2025-08-19 16:30:38,052:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:38,052:INFO:Checking exceptions
2025-08-19 16:30:38,052:INFO:Importing libraries
2025-08-19 16:30:38,052:INFO:Copying training dataset
2025-08-19 16:30:38,069:INFO:Defining folds
2025-08-19 16:30:38,069:INFO:Declaring metric variables
2025-08-19 16:30:38,069:INFO:Importing untrained model
2025-08-19 16:30:38,069:INFO:Gradient Boosting Regressor Imported successfully
2025-08-19 16:30:38,069:INFO:Starting cross validation
2025-08-19 16:30:38,071:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:46,379:INFO:Calculating mean and std
2025-08-19 16:30:46,381:INFO:Creating metrics dataframe
2025-08-19 16:30:46,385:INFO:Uploading results into container
2025-08-19 16:30:46,385:INFO:Uploading model into container now
2025-08-19 16:30:46,386:INFO:_master_model_container: 16
2025-08-19 16:30:46,386:INFO:_display_container: 2
2025-08-19 16:30:46,387:INFO:GradientBoostingRegressor(random_state=123)
2025-08-19 16:30:46,387:INFO:create_model() successfully completed......................................
2025-08-19 16:30:46,513:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:46,514:INFO:Creating metrics dataframe
2025-08-19 16:30:46,519:INFO:Initializing Light Gradient Boosting Machine
2025-08-19 16:30:46,519:INFO:Total runtime is 0.9881623029708861 minutes
2025-08-19 16:30:46,519:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:46,519:INFO:Initializing create_model()
2025-08-19 16:30:46,519:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:46,519:INFO:Checking exceptions
2025-08-19 16:30:46,520:INFO:Importing libraries
2025-08-19 16:30:46,520:INFO:Copying training dataset
2025-08-19 16:30:46,537:INFO:Defining folds
2025-08-19 16:30:46,537:INFO:Declaring metric variables
2025-08-19 16:30:46,538:INFO:Importing untrained model
2025-08-19 16:30:46,540:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 16:30:46,540:INFO:Starting cross validation
2025-08-19 16:30:46,542:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:51,857:INFO:Calculating mean and std
2025-08-19 16:30:51,858:INFO:Creating metrics dataframe
2025-08-19 16:30:51,863:INFO:Uploading results into container
2025-08-19 16:30:51,864:INFO:Uploading model into container now
2025-08-19 16:30:51,864:INFO:_master_model_container: 17
2025-08-19 16:30:51,864:INFO:_display_container: 2
2025-08-19 16:30:51,866:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:30:51,866:INFO:create_model() successfully completed......................................
2025-08-19 16:30:51,976:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:51,977:INFO:Creating metrics dataframe
2025-08-19 16:30:51,980:INFO:Initializing Dummy Regressor
2025-08-19 16:30:51,980:INFO:Total runtime is 1.0791898290316262 minutes
2025-08-19 16:30:51,981:INFO:SubProcess create_model() called ==================================
2025-08-19 16:30:51,981:INFO:Initializing create_model()
2025-08-19 16:30:51,981:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86748C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:51,981:INFO:Checking exceptions
2025-08-19 16:30:51,981:INFO:Importing libraries
2025-08-19 16:30:51,981:INFO:Copying training dataset
2025-08-19 16:30:51,998:INFO:Defining folds
2025-08-19 16:30:51,998:INFO:Declaring metric variables
2025-08-19 16:30:51,999:INFO:Importing untrained model
2025-08-19 16:30:51,999:INFO:Dummy Regressor Imported successfully
2025-08-19 16:30:51,999:INFO:Starting cross validation
2025-08-19 16:30:52,001:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:30:52,283:INFO:Calculating mean and std
2025-08-19 16:30:52,283:INFO:Creating metrics dataframe
2025-08-19 16:30:52,287:INFO:Uploading results into container
2025-08-19 16:30:52,289:INFO:Uploading model into container now
2025-08-19 16:30:52,289:INFO:_master_model_container: 18
2025-08-19 16:30:52,289:INFO:_display_container: 2
2025-08-19 16:30:52,290:INFO:DummyRegressor()
2025-08-19 16:30:52,291:INFO:create_model() successfully completed......................................
2025-08-19 16:30:52,383:INFO:SubProcess create_model() end ==================================
2025-08-19 16:30:52,384:INFO:Creating metrics dataframe
2025-08-19 16:30:52,391:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-08-19 16:30:52,392:INFO:Initializing create_model()
2025-08-19 16:30:52,393:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C86D9A9D0>, estimator=Lasso(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:30:52,393:INFO:Checking exceptions
2025-08-19 16:30:52,394:INFO:Importing libraries
2025-08-19 16:30:52,394:INFO:Copying training dataset
2025-08-19 16:30:52,411:INFO:Defining folds
2025-08-19 16:30:52,411:INFO:Declaring metric variables
2025-08-19 16:30:52,411:INFO:Importing untrained model
2025-08-19 16:30:52,411:INFO:Declaring custom model
2025-08-19 16:30:52,412:INFO:Lasso Regression Imported successfully
2025-08-19 16:30:52,413:INFO:Cross validation set to False
2025-08-19 16:30:52,413:INFO:Fitting Model
2025-08-19 16:30:52,533:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.842e+03, tolerance: 2.250e+02
  model = cd_fast.enet_coordinate_descent(

2025-08-19 16:30:52,533:INFO:Lasso(random_state=123)
2025-08-19 16:30:52,534:INFO:create_model() successfully completed......................................
2025-08-19 16:30:52,631:INFO:_master_model_container: 18
2025-08-19 16:30:52,631:INFO:_display_container: 2
2025-08-19 16:30:52,632:INFO:Lasso(random_state=123)
2025-08-19 16:30:52,632:INFO:compare_models() successfully completed......................................
2025-08-19 16:36:23,490:INFO:PyCaret RegressionExperiment
2025-08-19 16:36:23,491:INFO:Logging name: reg-default-name
2025-08-19 16:36:23,491:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-19 16:36:23,491:INFO:version 3.3.2
2025-08-19 16:36:23,491:INFO:Initializing setup()
2025-08-19 16:36:23,492:INFO:self.USI: 29ca
2025-08-19 16:36:23,492:INFO:self._variable_keys: {'transform_target_param', 'gpu_param', 'log_plots_param', 'USI', '_available_plots', 'data', 'y', 'X_train', 'gpu_n_jobs_param', 'idx', 'fold_groups_param', 'y_test', '_ml_usecase', 'X', 'n_jobs_param', 'memory', 'y_train', 'X_test', 'seed', 'html_param', 'fold_shuffle_param', 'fold_generator', 'exp_id', 'logging_param', 'exp_name_log', 'target_param', 'pipeline'}
2025-08-19 16:36:23,492:INFO:Checking environment
2025-08-19 16:36:23,492:INFO:python_version: 3.9.23
2025-08-19 16:36:23,492:INFO:python_build: ('main', 'Jun  5 2025 13:25:08')
2025-08-19 16:36:23,493:INFO:machine: AMD64
2025-08-19 16:36:23,493:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 16:36:23,505:INFO:Memory: svmem(total=17015848960, available=4122877952, percent=75.8, used=12892971008, free=4122877952)
2025-08-19 16:36:23,505:INFO:Physical Core: 6
2025-08-19 16:36:23,506:INFO:Logical Core: 12
2025-08-19 16:36:23,507:INFO:Checking libraries
2025-08-19 16:36:23,507:INFO:System:
2025-08-19 16:36:23,507:INFO:    python: 3.9.23 (main, Jun  5 2025, 13:25:08) [MSC v.1929 64 bit (AMD64)]
2025-08-19 16:36:23,508:INFO:executable: D:\Programming\My_works\conda_env\auto_ml\python.exe
2025-08-19 16:36:23,509:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 16:36:23,509:INFO:PyCaret required dependencies:
2025-08-19 16:36:23,509:INFO:                 pip: 25.1
2025-08-19 16:36:23,509:INFO:          setuptools: 78.1.1
2025-08-19 16:36:23,510:INFO:             pycaret: 3.3.2
2025-08-19 16:36:23,511:INFO:             IPython: 8.18.1
2025-08-19 16:36:23,512:INFO:          ipywidgets: 8.1.7
2025-08-19 16:36:23,512:INFO:                tqdm: 4.67.1
2025-08-19 16:36:23,512:INFO:               numpy: 1.26.4
2025-08-19 16:36:23,512:INFO:              pandas: 2.1.4
2025-08-19 16:36:23,513:INFO:              jinja2: 3.1.6
2025-08-19 16:36:23,514:INFO:               scipy: 1.11.4
2025-08-19 16:36:23,515:INFO:              joblib: 1.3.2
2025-08-19 16:36:23,515:INFO:             sklearn: 1.4.2
2025-08-19 16:36:23,516:INFO:                pyod: 2.0.5
2025-08-19 16:36:23,517:INFO:            imblearn: 0.12.4
2025-08-19 16:36:23,517:INFO:   category_encoders: 2.6.4
2025-08-19 16:36:23,518:INFO:            lightgbm: 4.6.0
2025-08-19 16:36:23,518:INFO:               numba: 0.60.0
2025-08-19 16:36:23,519:INFO:            requests: 2.32.5
2025-08-19 16:36:23,520:INFO:          matplotlib: 3.7.5
2025-08-19 16:36:23,520:INFO:          scikitplot: 0.3.7
2025-08-19 16:36:23,521:INFO:         yellowbrick: 1.5
2025-08-19 16:36:23,521:INFO:              plotly: 5.24.1
2025-08-19 16:36:23,521:INFO:    plotly-resampler: Not installed
2025-08-19 16:36:23,522:INFO:             kaleido: 1.0.0
2025-08-19 16:36:23,522:INFO:           schemdraw: 0.15
2025-08-19 16:36:23,522:INFO:         statsmodels: 0.14.5
2025-08-19 16:36:23,523:INFO:              sktime: 0.26.0
2025-08-19 16:36:23,524:INFO:               tbats: 1.1.3
2025-08-19 16:36:23,524:INFO:            pmdarima: 2.0.4
2025-08-19 16:36:23,524:INFO:              psutil: 6.1.0
2025-08-19 16:36:23,524:INFO:          markupsafe: 3.0.2
2025-08-19 16:36:23,525:INFO:             pickle5: Not installed
2025-08-19 16:36:23,526:INFO:         cloudpickle: 3.1.1
2025-08-19 16:36:23,526:INFO:         deprecation: 2.1.0
2025-08-19 16:36:23,526:INFO:              xxhash: 3.5.0
2025-08-19 16:36:23,526:INFO:           wurlitzer: Not installed
2025-08-19 16:36:23,526:INFO:PyCaret optional dependencies:
2025-08-19 16:36:23,527:INFO:                shap: Not installed
2025-08-19 16:36:23,528:INFO:           interpret: Not installed
2025-08-19 16:36:23,528:INFO:                umap: Not installed
2025-08-19 16:36:23,529:INFO:     ydata_profiling: Not installed
2025-08-19 16:36:23,529:INFO:  explainerdashboard: Not installed
2025-08-19 16:36:23,529:INFO:             autoviz: Not installed
2025-08-19 16:36:23,529:INFO:           fairlearn: Not installed
2025-08-19 16:36:23,529:INFO:          deepchecks: Not installed
2025-08-19 16:36:23,530:INFO:             xgboost: Not installed
2025-08-19 16:36:23,530:INFO:            catboost: Not installed
2025-08-19 16:36:23,531:INFO:              kmodes: Not installed
2025-08-19 16:36:23,531:INFO:             mlxtend: Not installed
2025-08-19 16:36:23,531:INFO:       statsforecast: Not installed
2025-08-19 16:36:23,531:INFO:        tune_sklearn: Not installed
2025-08-19 16:36:23,532:INFO:                 ray: Not installed
2025-08-19 16:36:23,532:INFO:            hyperopt: Not installed
2025-08-19 16:36:23,533:INFO:              optuna: Not installed
2025-08-19 16:36:23,533:INFO:               skopt: Not installed
2025-08-19 16:36:23,533:INFO:              mlflow: Not installed
2025-08-19 16:36:23,533:INFO:              gradio: Not installed
2025-08-19 16:36:23,533:INFO:             fastapi: 0.116.1
2025-08-19 16:36:23,533:INFO:             uvicorn: 0.35.0
2025-08-19 16:36:23,533:INFO:              m2cgen: Not installed
2025-08-19 16:36:23,534:INFO:           evidently: Not installed
2025-08-19 16:36:23,534:INFO:               fugue: Not installed
2025-08-19 16:36:23,534:INFO:           streamlit: 1.48.1
2025-08-19 16:36:23,534:INFO:             prophet: Not installed
2025-08-19 16:36:23,534:INFO:None
2025-08-19 16:36:23,535:INFO:Set up data.
2025-08-19 16:36:23,547:INFO:Set up folding strategy.
2025-08-19 16:36:23,548:INFO:Set up train/test split.
2025-08-19 16:36:23,562:INFO:Set up index.
2025-08-19 16:36:23,562:INFO:Assigning column types.
2025-08-19 16:36:23,571:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-19 16:36:23,572:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,582:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,589:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,677:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,744:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,745:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:23,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:23,747:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,753:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,759:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,838:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,904:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,905:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:23,906:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:23,906:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-08-19 16:36:23,913:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:36:23,919:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,004:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,067:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,069:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,070:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,078:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,085:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,168:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,238:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,239:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,240:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-08-19 16:36:24,254:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,338:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,393:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,393:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,394:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,408:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,524:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,618:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,622:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,624:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,624:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-08-19 16:36:24,767:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,866:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:24,868:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:24,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,054:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:25,149:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:36:25,152:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,153:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,154:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-19 16:36:25,264:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:25,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,334:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,436:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:36:25,509:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,510:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,511:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-08-19 16:36:25,756:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,756:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:25,971:INFO:Preparing preprocessing pipeline...
2025-08-19 16:36:25,971:INFO:Set up simple imputation.
2025-08-19 16:36:26,008:INFO:Finished creating preprocessing pipeline.
2025-08-19 16:36:26,013:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Public\Documents\ESTsoft\CreatorTemp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Square_Footage', 'Num_Bedrooms',
                                             'Num_Bathrooms', 'Year_Built',
                                             'Lot_Size', 'Garage_Size',
                                             'Neighborhood_Quality'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2025-08-19 16:36:26,013:INFO:Creating final display dataframe.
2025-08-19 16:36:26,241:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target       House_Price
2                   Target type        Regression
3           Original data shape         (1000, 8)
4        Transformed data shape         (1000, 8)
5   Transformed train set shape          (700, 8)
6    Transformed test set shape          (300, 8)
7              Numeric features                 7
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              29ca
2025-08-19 16:36:26,396:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:26,396:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:26,614:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:26,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:36:26,618:INFO:setup() successfully completed in 3.14s...............
2025-08-19 16:36:26,618:INFO:Initializing compare_models()
2025-08-19 16:36:26,618:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-08-19 16:36:26,619:INFO:Checking exceptions
2025-08-19 16:36:26,622:INFO:Preparing display monitor
2025-08-19 16:36:26,626:INFO:Initializing Linear Regression
2025-08-19 16:36:26,627:INFO:Total runtime is 9.981791178385417e-06 minutes
2025-08-19 16:36:26,628:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:26,628:INFO:Initializing create_model()
2025-08-19 16:36:26,628:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:26,629:INFO:Checking exceptions
2025-08-19 16:36:26,629:INFO:Importing libraries
2025-08-19 16:36:26,629:INFO:Copying training dataset
2025-08-19 16:36:26,638:INFO:Defining folds
2025-08-19 16:36:26,639:INFO:Declaring metric variables
2025-08-19 16:36:26,640:INFO:Importing untrained model
2025-08-19 16:36:26,641:INFO:Linear Regression Imported successfully
2025-08-19 16:36:26,642:INFO:Starting cross validation
2025-08-19 16:36:26,645:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:43,483:INFO:Calculating mean and std
2025-08-19 16:36:43,485:INFO:Creating metrics dataframe
2025-08-19 16:36:43,487:INFO:Uploading results into container
2025-08-19 16:36:43,488:INFO:Uploading model into container now
2025-08-19 16:36:43,488:INFO:_master_model_container: 1
2025-08-19 16:36:43,489:INFO:_display_container: 2
2025-08-19 16:36:43,489:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:36:43,489:INFO:create_model() successfully completed......................................
2025-08-19 16:36:43,579:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:43,579:INFO:Creating metrics dataframe
2025-08-19 16:36:43,583:INFO:Initializing Lasso Regression
2025-08-19 16:36:43,583:INFO:Total runtime is 0.2826072096824646 minutes
2025-08-19 16:36:43,583:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:43,583:INFO:Initializing create_model()
2025-08-19 16:36:43,583:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:43,583:INFO:Checking exceptions
2025-08-19 16:36:43,583:INFO:Importing libraries
2025-08-19 16:36:43,584:INFO:Copying training dataset
2025-08-19 16:36:43,589:INFO:Defining folds
2025-08-19 16:36:43,590:INFO:Declaring metric variables
2025-08-19 16:36:43,590:INFO:Importing untrained model
2025-08-19 16:36:43,590:INFO:Lasso Regression Imported successfully
2025-08-19 16:36:43,590:INFO:Starting cross validation
2025-08-19 16:36:43,591:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:47,754:INFO:Calculating mean and std
2025-08-19 16:36:47,755:INFO:Creating metrics dataframe
2025-08-19 16:36:47,758:INFO:Uploading results into container
2025-08-19 16:36:47,759:INFO:Uploading model into container now
2025-08-19 16:36:47,760:INFO:_master_model_container: 2
2025-08-19 16:36:47,760:INFO:_display_container: 2
2025-08-19 16:36:47,761:INFO:Lasso(random_state=123)
2025-08-19 16:36:47,761:INFO:create_model() successfully completed......................................
2025-08-19 16:36:47,841:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:47,842:INFO:Creating metrics dataframe
2025-08-19 16:36:47,845:INFO:Initializing Ridge Regression
2025-08-19 16:36:47,846:INFO:Total runtime is 0.35365736881891885 minutes
2025-08-19 16:36:47,846:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:47,846:INFO:Initializing create_model()
2025-08-19 16:36:47,846:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:47,846:INFO:Checking exceptions
2025-08-19 16:36:47,846:INFO:Importing libraries
2025-08-19 16:36:47,846:INFO:Copying training dataset
2025-08-19 16:36:47,851:INFO:Defining folds
2025-08-19 16:36:47,852:INFO:Declaring metric variables
2025-08-19 16:36:47,852:INFO:Importing untrained model
2025-08-19 16:36:47,852:INFO:Ridge Regression Imported successfully
2025-08-19 16:36:47,852:INFO:Starting cross validation
2025-08-19 16:36:47,853:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:47,950:INFO:Calculating mean and std
2025-08-19 16:36:47,952:INFO:Creating metrics dataframe
2025-08-19 16:36:47,955:INFO:Uploading results into container
2025-08-19 16:36:47,955:INFO:Uploading model into container now
2025-08-19 16:36:47,956:INFO:_master_model_container: 3
2025-08-19 16:36:47,957:INFO:_display_container: 2
2025-08-19 16:36:47,957:INFO:Ridge(random_state=123)
2025-08-19 16:36:47,957:INFO:create_model() successfully completed......................................
2025-08-19 16:36:48,031:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:48,031:INFO:Creating metrics dataframe
2025-08-19 16:36:48,034:INFO:Initializing Elastic Net
2025-08-19 16:36:48,034:INFO:Total runtime is 0.3567989667256673 minutes
2025-08-19 16:36:48,034:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:48,034:INFO:Initializing create_model()
2025-08-19 16:36:48,035:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:48,035:INFO:Checking exceptions
2025-08-19 16:36:48,035:INFO:Importing libraries
2025-08-19 16:36:48,035:INFO:Copying training dataset
2025-08-19 16:36:48,040:INFO:Defining folds
2025-08-19 16:36:48,040:INFO:Declaring metric variables
2025-08-19 16:36:48,040:INFO:Importing untrained model
2025-08-19 16:36:48,040:INFO:Elastic Net Imported successfully
2025-08-19 16:36:48,041:INFO:Starting cross validation
2025-08-19 16:36:48,042:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:48,130:INFO:Calculating mean and std
2025-08-19 16:36:48,132:INFO:Creating metrics dataframe
2025-08-19 16:36:48,133:INFO:Uploading results into container
2025-08-19 16:36:48,134:INFO:Uploading model into container now
2025-08-19 16:36:48,134:INFO:_master_model_container: 4
2025-08-19 16:36:48,134:INFO:_display_container: 2
2025-08-19 16:36:48,134:INFO:ElasticNet(random_state=123)
2025-08-19 16:36:48,134:INFO:create_model() successfully completed......................................
2025-08-19 16:36:48,209:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:48,209:INFO:Creating metrics dataframe
2025-08-19 16:36:48,213:INFO:Initializing Least Angle Regression
2025-08-19 16:36:48,213:INFO:Total runtime is 0.3597726782162984 minutes
2025-08-19 16:36:48,213:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:48,213:INFO:Initializing create_model()
2025-08-19 16:36:48,213:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:48,213:INFO:Checking exceptions
2025-08-19 16:36:48,213:INFO:Importing libraries
2025-08-19 16:36:48,213:INFO:Copying training dataset
2025-08-19 16:36:48,218:INFO:Defining folds
2025-08-19 16:36:48,218:INFO:Declaring metric variables
2025-08-19 16:36:48,218:INFO:Importing untrained model
2025-08-19 16:36:48,218:INFO:Least Angle Regression Imported successfully
2025-08-19 16:36:48,219:INFO:Starting cross validation
2025-08-19 16:36:48,220:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:48,312:INFO:Calculating mean and std
2025-08-19 16:36:48,313:INFO:Creating metrics dataframe
2025-08-19 16:36:48,314:INFO:Uploading results into container
2025-08-19 16:36:48,315:INFO:Uploading model into container now
2025-08-19 16:36:48,315:INFO:_master_model_container: 5
2025-08-19 16:36:48,315:INFO:_display_container: 2
2025-08-19 16:36:48,315:INFO:Lars(random_state=123)
2025-08-19 16:36:48,315:INFO:create_model() successfully completed......................................
2025-08-19 16:36:48,389:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:48,389:INFO:Creating metrics dataframe
2025-08-19 16:36:48,393:INFO:Initializing Lasso Least Angle Regression
2025-08-19 16:36:48,393:INFO:Total runtime is 0.36277311642964677 minutes
2025-08-19 16:36:48,393:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:48,393:INFO:Initializing create_model()
2025-08-19 16:36:48,393:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:48,393:INFO:Checking exceptions
2025-08-19 16:36:48,393:INFO:Importing libraries
2025-08-19 16:36:48,394:INFO:Copying training dataset
2025-08-19 16:36:48,398:INFO:Defining folds
2025-08-19 16:36:48,398:INFO:Declaring metric variables
2025-08-19 16:36:48,399:INFO:Importing untrained model
2025-08-19 16:36:48,399:INFO:Lasso Least Angle Regression Imported successfully
2025-08-19 16:36:48,399:INFO:Starting cross validation
2025-08-19 16:36:48,400:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:48,493:INFO:Calculating mean and std
2025-08-19 16:36:48,494:INFO:Creating metrics dataframe
2025-08-19 16:36:48,496:INFO:Uploading results into container
2025-08-19 16:36:48,497:INFO:Uploading model into container now
2025-08-19 16:36:48,497:INFO:_master_model_container: 6
2025-08-19 16:36:48,497:INFO:_display_container: 2
2025-08-19 16:36:48,497:INFO:LassoLars(random_state=123)
2025-08-19 16:36:48,497:INFO:create_model() successfully completed......................................
2025-08-19 16:36:48,573:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:48,573:INFO:Creating metrics dataframe
2025-08-19 16:36:48,576:INFO:Initializing Orthogonal Matching Pursuit
2025-08-19 16:36:48,576:INFO:Total runtime is 0.3658322771390279 minutes
2025-08-19 16:36:48,576:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:48,576:INFO:Initializing create_model()
2025-08-19 16:36:48,577:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:48,577:INFO:Checking exceptions
2025-08-19 16:36:48,577:INFO:Importing libraries
2025-08-19 16:36:48,577:INFO:Copying training dataset
2025-08-19 16:36:48,581:INFO:Defining folds
2025-08-19 16:36:48,582:INFO:Declaring metric variables
2025-08-19 16:36:48,582:INFO:Importing untrained model
2025-08-19 16:36:48,582:INFO:Orthogonal Matching Pursuit Imported successfully
2025-08-19 16:36:48,582:INFO:Starting cross validation
2025-08-19 16:36:48,583:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:48,675:INFO:Calculating mean and std
2025-08-19 16:36:48,676:INFO:Creating metrics dataframe
2025-08-19 16:36:48,678:INFO:Uploading results into container
2025-08-19 16:36:48,678:INFO:Uploading model into container now
2025-08-19 16:36:48,679:INFO:_master_model_container: 7
2025-08-19 16:36:48,679:INFO:_display_container: 2
2025-08-19 16:36:48,679:INFO:OrthogonalMatchingPursuit()
2025-08-19 16:36:48,679:INFO:create_model() successfully completed......................................
2025-08-19 16:36:48,754:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:48,754:INFO:Creating metrics dataframe
2025-08-19 16:36:48,759:INFO:Initializing Bayesian Ridge
2025-08-19 16:36:48,759:INFO:Total runtime is 0.36887241601943965 minutes
2025-08-19 16:36:48,759:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:48,759:INFO:Initializing create_model()
2025-08-19 16:36:48,759:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:48,760:INFO:Checking exceptions
2025-08-19 16:36:48,760:INFO:Importing libraries
2025-08-19 16:36:48,760:INFO:Copying training dataset
2025-08-19 16:36:48,764:INFO:Defining folds
2025-08-19 16:36:48,764:INFO:Declaring metric variables
2025-08-19 16:36:48,765:INFO:Importing untrained model
2025-08-19 16:36:48,765:INFO:Bayesian Ridge Imported successfully
2025-08-19 16:36:48,766:INFO:Starting cross validation
2025-08-19 16:36:48,766:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:48,856:INFO:Calculating mean and std
2025-08-19 16:36:48,858:INFO:Creating metrics dataframe
2025-08-19 16:36:48,860:INFO:Uploading results into container
2025-08-19 16:36:48,861:INFO:Uploading model into container now
2025-08-19 16:36:48,861:INFO:_master_model_container: 8
2025-08-19 16:36:48,861:INFO:_display_container: 2
2025-08-19 16:36:48,861:INFO:BayesianRidge()
2025-08-19 16:36:48,861:INFO:create_model() successfully completed......................................
2025-08-19 16:36:48,941:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:48,941:INFO:Creating metrics dataframe
2025-08-19 16:36:48,944:INFO:Initializing Passive Aggressive Regressor
2025-08-19 16:36:48,944:INFO:Total runtime is 0.3719678203264872 minutes
2025-08-19 16:36:48,945:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:48,945:INFO:Initializing create_model()
2025-08-19 16:36:48,945:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:48,945:INFO:Checking exceptions
2025-08-19 16:36:48,945:INFO:Importing libraries
2025-08-19 16:36:48,946:INFO:Copying training dataset
2025-08-19 16:36:48,950:INFO:Defining folds
2025-08-19 16:36:48,950:INFO:Declaring metric variables
2025-08-19 16:36:48,950:INFO:Importing untrained model
2025-08-19 16:36:48,950:INFO:Passive Aggressive Regressor Imported successfully
2025-08-19 16:36:48,951:INFO:Starting cross validation
2025-08-19 16:36:48,952:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:49,038:INFO:Calculating mean and std
2025-08-19 16:36:49,038:INFO:Creating metrics dataframe
2025-08-19 16:36:49,040:INFO:Uploading results into container
2025-08-19 16:36:49,041:INFO:Uploading model into container now
2025-08-19 16:36:49,042:INFO:_master_model_container: 9
2025-08-19 16:36:49,042:INFO:_display_container: 2
2025-08-19 16:36:49,042:INFO:PassiveAggressiveRegressor(random_state=123)
2025-08-19 16:36:49,042:INFO:create_model() successfully completed......................................
2025-08-19 16:36:49,118:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:49,118:INFO:Creating metrics dataframe
2025-08-19 16:36:49,121:INFO:Initializing Huber Regressor
2025-08-19 16:36:49,121:INFO:Total runtime is 0.3749112923940022 minutes
2025-08-19 16:36:49,122:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:49,122:INFO:Initializing create_model()
2025-08-19 16:36:49,122:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:49,122:INFO:Checking exceptions
2025-08-19 16:36:49,122:INFO:Importing libraries
2025-08-19 16:36:49,122:INFO:Copying training dataset
2025-08-19 16:36:49,127:INFO:Defining folds
2025-08-19 16:36:49,127:INFO:Declaring metric variables
2025-08-19 16:36:49,127:INFO:Importing untrained model
2025-08-19 16:36:49,128:INFO:Huber Regressor Imported successfully
2025-08-19 16:36:49,128:INFO:Starting cross validation
2025-08-19 16:36:49,129:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:49,230:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:36:49,232:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:36:49,253:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:36:49,279:INFO:Calculating mean and std
2025-08-19 16:36:49,280:INFO:Creating metrics dataframe
2025-08-19 16:36:49,283:INFO:Uploading results into container
2025-08-19 16:36:49,283:INFO:Uploading model into container now
2025-08-19 16:36:49,284:INFO:_master_model_container: 10
2025-08-19 16:36:49,284:INFO:_display_container: 2
2025-08-19 16:36:49,284:INFO:HuberRegressor()
2025-08-19 16:36:49,284:INFO:create_model() successfully completed......................................
2025-08-19 16:36:49,362:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:49,362:INFO:Creating metrics dataframe
2025-08-19 16:36:49,366:INFO:Initializing K Neighbors Regressor
2025-08-19 16:36:49,366:INFO:Total runtime is 0.3789857069651285 minutes
2025-08-19 16:36:49,366:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:49,366:INFO:Initializing create_model()
2025-08-19 16:36:49,366:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:49,366:INFO:Checking exceptions
2025-08-19 16:36:49,366:INFO:Importing libraries
2025-08-19 16:36:49,366:INFO:Copying training dataset
2025-08-19 16:36:49,371:INFO:Defining folds
2025-08-19 16:36:49,371:INFO:Declaring metric variables
2025-08-19 16:36:49,371:INFO:Importing untrained model
2025-08-19 16:36:49,372:INFO:K Neighbors Regressor Imported successfully
2025-08-19 16:36:49,372:INFO:Starting cross validation
2025-08-19 16:36:49,373:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:49,521:INFO:Calculating mean and std
2025-08-19 16:36:49,522:INFO:Creating metrics dataframe
2025-08-19 16:36:49,524:INFO:Uploading results into container
2025-08-19 16:36:49,525:INFO:Uploading model into container now
2025-08-19 16:36:49,525:INFO:_master_model_container: 11
2025-08-19 16:36:49,525:INFO:_display_container: 2
2025-08-19 16:36:49,525:INFO:KNeighborsRegressor(n_jobs=-1)
2025-08-19 16:36:49,525:INFO:create_model() successfully completed......................................
2025-08-19 16:36:49,600:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:49,600:INFO:Creating metrics dataframe
2025-08-19 16:36:49,603:INFO:Initializing Decision Tree Regressor
2025-08-19 16:36:49,604:INFO:Total runtime is 0.3829578320185343 minutes
2025-08-19 16:36:49,604:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:49,604:INFO:Initializing create_model()
2025-08-19 16:36:49,605:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:49,605:INFO:Checking exceptions
2025-08-19 16:36:49,605:INFO:Importing libraries
2025-08-19 16:36:49,605:INFO:Copying training dataset
2025-08-19 16:36:49,609:INFO:Defining folds
2025-08-19 16:36:49,609:INFO:Declaring metric variables
2025-08-19 16:36:49,610:INFO:Importing untrained model
2025-08-19 16:36:49,610:INFO:Decision Tree Regressor Imported successfully
2025-08-19 16:36:49,610:INFO:Starting cross validation
2025-08-19 16:36:49,612:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:49,703:INFO:Calculating mean and std
2025-08-19 16:36:49,704:INFO:Creating metrics dataframe
2025-08-19 16:36:49,707:INFO:Uploading results into container
2025-08-19 16:36:49,707:INFO:Uploading model into container now
2025-08-19 16:36:49,708:INFO:_master_model_container: 12
2025-08-19 16:36:49,708:INFO:_display_container: 2
2025-08-19 16:36:49,708:INFO:DecisionTreeRegressor(random_state=123)
2025-08-19 16:36:49,709:INFO:create_model() successfully completed......................................
2025-08-19 16:36:49,784:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:49,785:INFO:Creating metrics dataframe
2025-08-19 16:36:49,790:INFO:Initializing Random Forest Regressor
2025-08-19 16:36:49,790:INFO:Total runtime is 0.38605409065882357 minutes
2025-08-19 16:36:49,790:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:49,790:INFO:Initializing create_model()
2025-08-19 16:36:49,790:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:49,790:INFO:Checking exceptions
2025-08-19 16:36:49,790:INFO:Importing libraries
2025-08-19 16:36:49,790:INFO:Copying training dataset
2025-08-19 16:36:49,796:INFO:Defining folds
2025-08-19 16:36:49,796:INFO:Declaring metric variables
2025-08-19 16:36:49,796:INFO:Importing untrained model
2025-08-19 16:36:49,797:INFO:Random Forest Regressor Imported successfully
2025-08-19 16:36:49,797:INFO:Starting cross validation
2025-08-19 16:36:49,798:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:50,540:INFO:Calculating mean and std
2025-08-19 16:36:50,541:INFO:Creating metrics dataframe
2025-08-19 16:36:50,544:INFO:Uploading results into container
2025-08-19 16:36:50,544:INFO:Uploading model into container now
2025-08-19 16:36:50,545:INFO:_master_model_container: 13
2025-08-19 16:36:50,545:INFO:_display_container: 2
2025-08-19 16:36:50,546:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:36:50,546:INFO:create_model() successfully completed......................................
2025-08-19 16:36:50,631:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:50,631:INFO:Creating metrics dataframe
2025-08-19 16:36:50,635:INFO:Initializing Extra Trees Regressor
2025-08-19 16:36:50,635:INFO:Total runtime is 0.4001459002494811 minutes
2025-08-19 16:36:50,635:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:50,635:INFO:Initializing create_model()
2025-08-19 16:36:50,636:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:50,636:INFO:Checking exceptions
2025-08-19 16:36:50,636:INFO:Importing libraries
2025-08-19 16:36:50,636:INFO:Copying training dataset
2025-08-19 16:36:50,643:INFO:Defining folds
2025-08-19 16:36:50,643:INFO:Declaring metric variables
2025-08-19 16:36:50,643:INFO:Importing untrained model
2025-08-19 16:36:50,644:INFO:Extra Trees Regressor Imported successfully
2025-08-19 16:36:50,644:INFO:Starting cross validation
2025-08-19 16:36:50,646:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:51,332:INFO:Calculating mean and std
2025-08-19 16:36:51,333:INFO:Creating metrics dataframe
2025-08-19 16:36:51,336:INFO:Uploading results into container
2025-08-19 16:36:51,337:INFO:Uploading model into container now
2025-08-19 16:36:51,338:INFO:_master_model_container: 14
2025-08-19 16:36:51,338:INFO:_display_container: 2
2025-08-19 16:36:51,339:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:36:51,339:INFO:create_model() successfully completed......................................
2025-08-19 16:36:51,427:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:51,427:INFO:Creating metrics dataframe
2025-08-19 16:36:51,431:INFO:Initializing AdaBoost Regressor
2025-08-19 16:36:51,431:INFO:Total runtime is 0.41341471672058094 minutes
2025-08-19 16:36:51,431:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:51,431:INFO:Initializing create_model()
2025-08-19 16:36:51,432:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:51,432:INFO:Checking exceptions
2025-08-19 16:36:51,432:INFO:Importing libraries
2025-08-19 16:36:51,432:INFO:Copying training dataset
2025-08-19 16:36:51,438:INFO:Defining folds
2025-08-19 16:36:51,439:INFO:Declaring metric variables
2025-08-19 16:36:51,439:INFO:Importing untrained model
2025-08-19 16:36:51,440:INFO:AdaBoost Regressor Imported successfully
2025-08-19 16:36:51,441:INFO:Starting cross validation
2025-08-19 16:36:51,441:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:51,803:INFO:Calculating mean and std
2025-08-19 16:36:51,804:INFO:Creating metrics dataframe
2025-08-19 16:36:51,807:INFO:Uploading results into container
2025-08-19 16:36:51,808:INFO:Uploading model into container now
2025-08-19 16:36:51,809:INFO:_master_model_container: 15
2025-08-19 16:36:51,809:INFO:_display_container: 2
2025-08-19 16:36:51,809:INFO:AdaBoostRegressor(random_state=123)
2025-08-19 16:36:51,809:INFO:create_model() successfully completed......................................
2025-08-19 16:36:51,896:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:51,897:INFO:Creating metrics dataframe
2025-08-19 16:36:51,900:INFO:Initializing Gradient Boosting Regressor
2025-08-19 16:36:51,900:INFO:Total runtime is 0.421224021911621 minutes
2025-08-19 16:36:51,900:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:51,900:INFO:Initializing create_model()
2025-08-19 16:36:51,900:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:51,900:INFO:Checking exceptions
2025-08-19 16:36:51,900:INFO:Importing libraries
2025-08-19 16:36:51,900:INFO:Copying training dataset
2025-08-19 16:36:51,906:INFO:Defining folds
2025-08-19 16:36:51,907:INFO:Declaring metric variables
2025-08-19 16:36:51,908:INFO:Importing untrained model
2025-08-19 16:36:51,908:INFO:Gradient Boosting Regressor Imported successfully
2025-08-19 16:36:51,908:INFO:Starting cross validation
2025-08-19 16:36:51,909:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:52,274:INFO:Calculating mean and std
2025-08-19 16:36:52,276:INFO:Creating metrics dataframe
2025-08-19 16:36:52,278:INFO:Uploading results into container
2025-08-19 16:36:52,279:INFO:Uploading model into container now
2025-08-19 16:36:52,279:INFO:_master_model_container: 16
2025-08-19 16:36:52,279:INFO:_display_container: 2
2025-08-19 16:36:52,280:INFO:GradientBoostingRegressor(random_state=123)
2025-08-19 16:36:52,280:INFO:create_model() successfully completed......................................
2025-08-19 16:36:52,380:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:52,380:INFO:Creating metrics dataframe
2025-08-19 16:36:52,384:INFO:Initializing Light Gradient Boosting Machine
2025-08-19 16:36:52,385:INFO:Total runtime is 0.42930212815602614 minutes
2025-08-19 16:36:52,385:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:52,385:INFO:Initializing create_model()
2025-08-19 16:36:52,385:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:52,385:INFO:Checking exceptions
2025-08-19 16:36:52,385:INFO:Importing libraries
2025-08-19 16:36:52,385:INFO:Copying training dataset
2025-08-19 16:36:52,392:INFO:Defining folds
2025-08-19 16:36:52,392:INFO:Declaring metric variables
2025-08-19 16:36:52,392:INFO:Importing untrained model
2025-08-19 16:36:52,393:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 16:36:52,394:INFO:Starting cross validation
2025-08-19 16:36:52,395:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:53,802:INFO:Calculating mean and std
2025-08-19 16:36:53,804:INFO:Creating metrics dataframe
2025-08-19 16:36:53,809:INFO:Uploading results into container
2025-08-19 16:36:53,811:INFO:Uploading model into container now
2025-08-19 16:36:53,812:INFO:_master_model_container: 17
2025-08-19 16:36:53,812:INFO:_display_container: 2
2025-08-19 16:36:53,814:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:36:53,814:INFO:create_model() successfully completed......................................
2025-08-19 16:36:53,929:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:53,929:INFO:Creating metrics dataframe
2025-08-19 16:36:53,932:INFO:Initializing Dummy Regressor
2025-08-19 16:36:53,932:INFO:Total runtime is 0.45509789387385047 minutes
2025-08-19 16:36:53,933:INFO:SubProcess create_model() called ==================================
2025-08-19 16:36:53,933:INFO:Initializing create_model()
2025-08-19 16:36:53,933:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C86F662B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:53,933:INFO:Checking exceptions
2025-08-19 16:36:53,933:INFO:Importing libraries
2025-08-19 16:36:53,933:INFO:Copying training dataset
2025-08-19 16:36:53,939:INFO:Defining folds
2025-08-19 16:36:53,940:INFO:Declaring metric variables
2025-08-19 16:36:53,940:INFO:Importing untrained model
2025-08-19 16:36:53,940:INFO:Dummy Regressor Imported successfully
2025-08-19 16:36:53,940:INFO:Starting cross validation
2025-08-19 16:36:53,941:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:36:54,028:INFO:Calculating mean and std
2025-08-19 16:36:54,028:INFO:Creating metrics dataframe
2025-08-19 16:36:54,030:INFO:Uploading results into container
2025-08-19 16:36:54,031:INFO:Uploading model into container now
2025-08-19 16:36:54,032:INFO:_master_model_container: 18
2025-08-19 16:36:54,032:INFO:_display_container: 2
2025-08-19 16:36:54,032:INFO:DummyRegressor()
2025-08-19 16:36:54,032:INFO:create_model() successfully completed......................................
2025-08-19 16:36:54,110:INFO:SubProcess create_model() end ==================================
2025-08-19 16:36:54,110:INFO:Creating metrics dataframe
2025-08-19 16:36:54,114:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-08-19 16:36:54,116:INFO:Initializing create_model()
2025-08-19 16:36:54,116:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C84D80A90>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:36:54,116:INFO:Checking exceptions
2025-08-19 16:36:54,116:INFO:Importing libraries
2025-08-19 16:36:54,117:INFO:Copying training dataset
2025-08-19 16:36:54,122:INFO:Defining folds
2025-08-19 16:36:54,122:INFO:Declaring metric variables
2025-08-19 16:36:54,123:INFO:Importing untrained model
2025-08-19 16:36:54,123:INFO:Declaring custom model
2025-08-19 16:36:54,123:INFO:Linear Regression Imported successfully
2025-08-19 16:36:54,124:INFO:Cross validation set to False
2025-08-19 16:36:54,124:INFO:Fitting Model
2025-08-19 16:36:54,132:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:36:54,132:INFO:create_model() successfully completed......................................
2025-08-19 16:36:54,225:INFO:_master_model_container: 18
2025-08-19 16:36:54,226:INFO:_display_container: 2
2025-08-19 16:36:54,226:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:36:54,226:INFO:compare_models() successfully completed......................................
2025-08-19 16:44:30,000:INFO:PyCaret RegressionExperiment
2025-08-19 16:44:30,000:INFO:Logging name: reg-default-name
2025-08-19 16:44:30,001:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-19 16:44:30,001:INFO:version 3.3.2
2025-08-19 16:44:30,001:INFO:Initializing setup()
2025-08-19 16:44:30,001:INFO:self.USI: 5852
2025-08-19 16:44:30,002:INFO:self._variable_keys: {'transform_target_param', 'gpu_param', 'log_plots_param', 'USI', '_available_plots', 'data', 'y', 'X_train', 'gpu_n_jobs_param', 'idx', 'fold_groups_param', 'y_test', '_ml_usecase', 'X', 'n_jobs_param', 'memory', 'y_train', 'X_test', 'seed', 'html_param', 'fold_shuffle_param', 'fold_generator', 'exp_id', 'logging_param', 'exp_name_log', 'target_param', 'pipeline'}
2025-08-19 16:44:30,002:INFO:Checking environment
2025-08-19 16:44:30,002:INFO:python_version: 3.9.23
2025-08-19 16:44:30,002:INFO:python_build: ('main', 'Jun  5 2025 13:25:08')
2025-08-19 16:44:30,002:INFO:machine: AMD64
2025-08-19 16:44:30,002:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 16:44:30,009:INFO:Memory: svmem(total=17015848960, available=4051824640, percent=76.2, used=12964024320, free=4051824640)
2025-08-19 16:44:30,009:INFO:Physical Core: 6
2025-08-19 16:44:30,009:INFO:Logical Core: 12
2025-08-19 16:44:30,009:INFO:Checking libraries
2025-08-19 16:44:30,009:INFO:System:
2025-08-19 16:44:30,010:INFO:    python: 3.9.23 (main, Jun  5 2025, 13:25:08) [MSC v.1929 64 bit (AMD64)]
2025-08-19 16:44:30,010:INFO:executable: D:\Programming\My_works\conda_env\auto_ml\python.exe
2025-08-19 16:44:30,010:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 16:44:30,010:INFO:PyCaret required dependencies:
2025-08-19 16:44:30,010:INFO:                 pip: 25.1
2025-08-19 16:44:30,010:INFO:          setuptools: 78.1.1
2025-08-19 16:44:30,011:INFO:             pycaret: 3.3.2
2025-08-19 16:44:30,011:INFO:             IPython: 8.18.1
2025-08-19 16:44:30,011:INFO:          ipywidgets: 8.1.7
2025-08-19 16:44:30,011:INFO:                tqdm: 4.67.1
2025-08-19 16:44:30,011:INFO:               numpy: 1.26.4
2025-08-19 16:44:30,011:INFO:              pandas: 2.1.4
2025-08-19 16:44:30,011:INFO:              jinja2: 3.1.6
2025-08-19 16:44:30,011:INFO:               scipy: 1.11.4
2025-08-19 16:44:30,011:INFO:              joblib: 1.3.2
2025-08-19 16:44:30,011:INFO:             sklearn: 1.4.2
2025-08-19 16:44:30,011:INFO:                pyod: 2.0.5
2025-08-19 16:44:30,011:INFO:            imblearn: 0.12.4
2025-08-19 16:44:30,011:INFO:   category_encoders: 2.6.4
2025-08-19 16:44:30,011:INFO:            lightgbm: 4.6.0
2025-08-19 16:44:30,011:INFO:               numba: 0.60.0
2025-08-19 16:44:30,012:INFO:            requests: 2.32.5
2025-08-19 16:44:30,012:INFO:          matplotlib: 3.7.5
2025-08-19 16:44:30,012:INFO:          scikitplot: 0.3.7
2025-08-19 16:44:30,012:INFO:         yellowbrick: 1.5
2025-08-19 16:44:30,012:INFO:              plotly: 5.24.1
2025-08-19 16:44:30,013:INFO:    plotly-resampler: Not installed
2025-08-19 16:44:30,013:INFO:             kaleido: 1.0.0
2025-08-19 16:44:30,013:INFO:           schemdraw: 0.15
2025-08-19 16:44:30,013:INFO:         statsmodels: 0.14.5
2025-08-19 16:44:30,013:INFO:              sktime: 0.26.0
2025-08-19 16:44:30,013:INFO:               tbats: 1.1.3
2025-08-19 16:44:30,014:INFO:            pmdarima: 2.0.4
2025-08-19 16:44:30,014:INFO:              psutil: 6.1.0
2025-08-19 16:44:30,014:INFO:          markupsafe: 3.0.2
2025-08-19 16:44:30,014:INFO:             pickle5: Not installed
2025-08-19 16:44:30,014:INFO:         cloudpickle: 3.1.1
2025-08-19 16:44:30,014:INFO:         deprecation: 2.1.0
2025-08-19 16:44:30,014:INFO:              xxhash: 3.5.0
2025-08-19 16:44:30,014:INFO:           wurlitzer: Not installed
2025-08-19 16:44:30,014:INFO:PyCaret optional dependencies:
2025-08-19 16:44:30,014:INFO:                shap: Not installed
2025-08-19 16:44:30,014:INFO:           interpret: Not installed
2025-08-19 16:44:30,015:INFO:                umap: Not installed
2025-08-19 16:44:30,015:INFO:     ydata_profiling: Not installed
2025-08-19 16:44:30,015:INFO:  explainerdashboard: Not installed
2025-08-19 16:44:30,016:INFO:             autoviz: Not installed
2025-08-19 16:44:30,016:INFO:           fairlearn: Not installed
2025-08-19 16:44:30,016:INFO:          deepchecks: Not installed
2025-08-19 16:44:30,016:INFO:             xgboost: Not installed
2025-08-19 16:44:30,016:INFO:            catboost: Not installed
2025-08-19 16:44:30,017:INFO:              kmodes: Not installed
2025-08-19 16:44:30,017:INFO:             mlxtend: Not installed
2025-08-19 16:44:30,017:INFO:       statsforecast: Not installed
2025-08-19 16:44:30,017:INFO:        tune_sklearn: Not installed
2025-08-19 16:44:30,017:INFO:                 ray: Not installed
2025-08-19 16:44:30,017:INFO:            hyperopt: Not installed
2025-08-19 16:44:30,017:INFO:              optuna: Not installed
2025-08-19 16:44:30,017:INFO:               skopt: Not installed
2025-08-19 16:44:30,018:INFO:              mlflow: Not installed
2025-08-19 16:44:30,018:INFO:              gradio: Not installed
2025-08-19 16:44:30,018:INFO:             fastapi: 0.116.1
2025-08-19 16:44:30,019:INFO:             uvicorn: 0.35.0
2025-08-19 16:44:30,019:INFO:              m2cgen: Not installed
2025-08-19 16:44:30,019:INFO:           evidently: Not installed
2025-08-19 16:44:30,019:INFO:               fugue: Not installed
2025-08-19 16:44:30,019:INFO:           streamlit: 1.48.1
2025-08-19 16:44:30,020:INFO:             prophet: Not installed
2025-08-19 16:44:30,020:INFO:None
2025-08-19 16:44:30,020:INFO:Set up data.
2025-08-19 16:44:30,033:INFO:Set up folding strategy.
2025-08-19 16:44:30,033:INFO:Set up train/test split.
2025-08-19 16:44:30,041:INFO:Set up index.
2025-08-19 16:44:30,042:INFO:Assigning column types.
2025-08-19 16:44:30,047:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-19 16:44:30,048:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,058:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,064:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,134:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,183:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,184:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,184:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,185:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,192:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,199:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,266:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,317:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,318:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,318:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,319:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-08-19 16:44:30,326:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,335:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,399:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,443:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,443:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,443:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,448:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,453:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,512:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,561:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,562:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,562:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-08-19 16:44:30,574:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,638:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,683:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,685:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,686:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,695:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,753:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,800:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,801:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,802:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,803:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-08-19 16:44:30,891:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,957:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:30,957:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:30,958:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,041:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:31,092:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 16:44:31,092:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,093:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,093:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-19 16:44:31,176:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:31,221:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,222:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,292:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-19 16:44:31,341:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,341:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,341:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-08-19 16:44:31,461:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,461:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,568:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,568:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,570:INFO:Preparing preprocessing pipeline...
2025-08-19 16:44:31,570:INFO:Set up simple imputation.
2025-08-19 16:44:31,591:INFO:Finished creating preprocessing pipeline.
2025-08-19 16:44:31,595:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Public\Documents\ESTsoft\CreatorTemp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Square_Footage', 'Num_Bedrooms',
                                             'Num_Bathrooms', 'Year_Built',
                                             'Lot_Size', 'Garage_Size',
                                             'Neighborhood_Quality'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2025-08-19 16:44:31,595:INFO:Creating final display dataframe.
2025-08-19 16:44:31,673:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target       House_Price
2                   Target type        Regression
3           Original data shape         (1000, 8)
4        Transformed data shape         (1000, 8)
5   Transformed train set shape          (700, 8)
6    Transformed test set shape          (300, 8)
7              Numeric features                 7
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              5852
2025-08-19 16:44:31,788:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,788:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,898:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 16:44:31,898:INFO:setup() successfully completed in 1.92s...............
2025-08-19 16:44:31,898:INFO:Initializing compare_models()
2025-08-19 16:44:31,898:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-08-19 16:44:31,898:INFO:Checking exceptions
2025-08-19 16:44:31,900:INFO:Preparing display monitor
2025-08-19 16:44:31,903:INFO:Initializing Linear Regression
2025-08-19 16:44:31,903:INFO:Total runtime is 0.0 minutes
2025-08-19 16:44:31,904:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:31,904:INFO:Initializing create_model()
2025-08-19 16:44:31,904:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:31,904:INFO:Checking exceptions
2025-08-19 16:44:31,904:INFO:Importing libraries
2025-08-19 16:44:31,904:INFO:Copying training dataset
2025-08-19 16:44:31,908:INFO:Defining folds
2025-08-19 16:44:31,908:INFO:Declaring metric variables
2025-08-19 16:44:31,908:INFO:Importing untrained model
2025-08-19 16:44:31,908:INFO:Linear Regression Imported successfully
2025-08-19 16:44:31,909:INFO:Starting cross validation
2025-08-19 16:44:31,910:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:41,687:INFO:Calculating mean and std
2025-08-19 16:44:41,687:INFO:Creating metrics dataframe
2025-08-19 16:44:41,692:INFO:Uploading results into container
2025-08-19 16:44:41,692:INFO:Uploading model into container now
2025-08-19 16:44:41,693:INFO:_master_model_container: 1
2025-08-19 16:44:41,693:INFO:_display_container: 2
2025-08-19 16:44:41,693:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:44:41,693:INFO:create_model() successfully completed......................................
2025-08-19 16:44:41,792:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:41,792:INFO:Creating metrics dataframe
2025-08-19 16:44:41,795:INFO:Initializing Lasso Regression
2025-08-19 16:44:41,796:INFO:Total runtime is 0.16487439076105753 minutes
2025-08-19 16:44:41,796:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:41,796:INFO:Initializing create_model()
2025-08-19 16:44:41,797:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:41,797:INFO:Checking exceptions
2025-08-19 16:44:41,797:INFO:Importing libraries
2025-08-19 16:44:41,797:INFO:Copying training dataset
2025-08-19 16:44:41,802:INFO:Defining folds
2025-08-19 16:44:41,803:INFO:Declaring metric variables
2025-08-19 16:44:41,803:INFO:Importing untrained model
2025-08-19 16:44:41,803:INFO:Lasso Regression Imported successfully
2025-08-19 16:44:41,803:INFO:Starting cross validation
2025-08-19 16:44:41,805:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:46,197:INFO:Calculating mean and std
2025-08-19 16:44:46,198:INFO:Creating metrics dataframe
2025-08-19 16:44:46,201:INFO:Uploading results into container
2025-08-19 16:44:46,202:INFO:Uploading model into container now
2025-08-19 16:44:46,202:INFO:_master_model_container: 2
2025-08-19 16:44:46,203:INFO:_display_container: 2
2025-08-19 16:44:46,203:INFO:Lasso(random_state=123)
2025-08-19 16:44:46,203:INFO:create_model() successfully completed......................................
2025-08-19 16:44:46,289:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:46,289:INFO:Creating metrics dataframe
2025-08-19 16:44:46,292:INFO:Initializing Ridge Regression
2025-08-19 16:44:46,292:INFO:Total runtime is 0.23982418378194173 minutes
2025-08-19 16:44:46,293:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:46,293:INFO:Initializing create_model()
2025-08-19 16:44:46,293:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:46,293:INFO:Checking exceptions
2025-08-19 16:44:46,293:INFO:Importing libraries
2025-08-19 16:44:46,294:INFO:Copying training dataset
2025-08-19 16:44:46,298:INFO:Defining folds
2025-08-19 16:44:46,298:INFO:Declaring metric variables
2025-08-19 16:44:46,298:INFO:Importing untrained model
2025-08-19 16:44:46,299:INFO:Ridge Regression Imported successfully
2025-08-19 16:44:46,299:INFO:Starting cross validation
2025-08-19 16:44:46,301:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:46,392:INFO:Calculating mean and std
2025-08-19 16:44:46,393:INFO:Creating metrics dataframe
2025-08-19 16:44:46,394:INFO:Uploading results into container
2025-08-19 16:44:46,395:INFO:Uploading model into container now
2025-08-19 16:44:46,395:INFO:_master_model_container: 3
2025-08-19 16:44:46,395:INFO:_display_container: 2
2025-08-19 16:44:46,396:INFO:Ridge(random_state=123)
2025-08-19 16:44:46,396:INFO:create_model() successfully completed......................................
2025-08-19 16:44:46,474:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:46,475:INFO:Creating metrics dataframe
2025-08-19 16:44:46,482:INFO:Initializing Elastic Net
2025-08-19 16:44:46,483:INFO:Total runtime is 0.24299565553665162 minutes
2025-08-19 16:44:46,484:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:46,484:INFO:Initializing create_model()
2025-08-19 16:44:46,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:46,485:INFO:Checking exceptions
2025-08-19 16:44:46,485:INFO:Importing libraries
2025-08-19 16:44:46,485:INFO:Copying training dataset
2025-08-19 16:44:46,493:INFO:Defining folds
2025-08-19 16:44:46,493:INFO:Declaring metric variables
2025-08-19 16:44:46,493:INFO:Importing untrained model
2025-08-19 16:44:46,495:INFO:Elastic Net Imported successfully
2025-08-19 16:44:46,495:INFO:Starting cross validation
2025-08-19 16:44:46,496:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:46,589:INFO:Calculating mean and std
2025-08-19 16:44:46,589:INFO:Creating metrics dataframe
2025-08-19 16:44:46,590:INFO:Uploading results into container
2025-08-19 16:44:46,591:INFO:Uploading model into container now
2025-08-19 16:44:46,592:INFO:_master_model_container: 4
2025-08-19 16:44:46,592:INFO:_display_container: 2
2025-08-19 16:44:46,592:INFO:ElasticNet(random_state=123)
2025-08-19 16:44:46,592:INFO:create_model() successfully completed......................................
2025-08-19 16:44:46,670:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:46,670:INFO:Creating metrics dataframe
2025-08-19 16:44:46,673:INFO:Initializing Least Angle Regression
2025-08-19 16:44:46,674:INFO:Total runtime is 0.24618379672368368 minutes
2025-08-19 16:44:46,674:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:46,674:INFO:Initializing create_model()
2025-08-19 16:44:46,675:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:46,675:INFO:Checking exceptions
2025-08-19 16:44:46,675:INFO:Importing libraries
2025-08-19 16:44:46,675:INFO:Copying training dataset
2025-08-19 16:44:46,679:INFO:Defining folds
2025-08-19 16:44:46,680:INFO:Declaring metric variables
2025-08-19 16:44:46,680:INFO:Importing untrained model
2025-08-19 16:44:46,681:INFO:Least Angle Regression Imported successfully
2025-08-19 16:44:46,682:INFO:Starting cross validation
2025-08-19 16:44:46,682:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:46,770:INFO:Calculating mean and std
2025-08-19 16:44:46,770:INFO:Creating metrics dataframe
2025-08-19 16:44:46,772:INFO:Uploading results into container
2025-08-19 16:44:46,773:INFO:Uploading model into container now
2025-08-19 16:44:46,773:INFO:_master_model_container: 5
2025-08-19 16:44:46,773:INFO:_display_container: 2
2025-08-19 16:44:46,774:INFO:Lars(random_state=123)
2025-08-19 16:44:46,774:INFO:create_model() successfully completed......................................
2025-08-19 16:44:46,850:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:46,850:INFO:Creating metrics dataframe
2025-08-19 16:44:46,853:INFO:Initializing Lasso Least Angle Regression
2025-08-19 16:44:46,853:INFO:Total runtime is 0.2491674542427063 minutes
2025-08-19 16:44:46,853:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:46,854:INFO:Initializing create_model()
2025-08-19 16:44:46,854:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:46,854:INFO:Checking exceptions
2025-08-19 16:44:46,854:INFO:Importing libraries
2025-08-19 16:44:46,854:INFO:Copying training dataset
2025-08-19 16:44:46,858:INFO:Defining folds
2025-08-19 16:44:46,858:INFO:Declaring metric variables
2025-08-19 16:44:46,859:INFO:Importing untrained model
2025-08-19 16:44:46,859:INFO:Lasso Least Angle Regression Imported successfully
2025-08-19 16:44:46,860:INFO:Starting cross validation
2025-08-19 16:44:46,860:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:46,952:INFO:Calculating mean and std
2025-08-19 16:44:46,952:INFO:Creating metrics dataframe
2025-08-19 16:44:46,955:INFO:Uploading results into container
2025-08-19 16:44:46,956:INFO:Uploading model into container now
2025-08-19 16:44:46,956:INFO:_master_model_container: 6
2025-08-19 16:44:46,956:INFO:_display_container: 2
2025-08-19 16:44:46,956:INFO:LassoLars(random_state=123)
2025-08-19 16:44:46,956:INFO:create_model() successfully completed......................................
2025-08-19 16:44:47,032:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:47,033:INFO:Creating metrics dataframe
2025-08-19 16:44:47,036:INFO:Initializing Orthogonal Matching Pursuit
2025-08-19 16:44:47,036:INFO:Total runtime is 0.2522154053052267 minutes
2025-08-19 16:44:47,036:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:47,036:INFO:Initializing create_model()
2025-08-19 16:44:47,036:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:47,037:INFO:Checking exceptions
2025-08-19 16:44:47,037:INFO:Importing libraries
2025-08-19 16:44:47,037:INFO:Copying training dataset
2025-08-19 16:44:47,041:INFO:Defining folds
2025-08-19 16:44:47,042:INFO:Declaring metric variables
2025-08-19 16:44:47,042:INFO:Importing untrained model
2025-08-19 16:44:47,042:INFO:Orthogonal Matching Pursuit Imported successfully
2025-08-19 16:44:47,042:INFO:Starting cross validation
2025-08-19 16:44:47,044:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:47,133:INFO:Calculating mean and std
2025-08-19 16:44:47,134:INFO:Creating metrics dataframe
2025-08-19 16:44:47,137:INFO:Uploading results into container
2025-08-19 16:44:47,137:INFO:Uploading model into container now
2025-08-19 16:44:47,138:INFO:_master_model_container: 7
2025-08-19 16:44:47,138:INFO:_display_container: 2
2025-08-19 16:44:47,138:INFO:OrthogonalMatchingPursuit()
2025-08-19 16:44:47,138:INFO:create_model() successfully completed......................................
2025-08-19 16:44:47,215:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:47,215:INFO:Creating metrics dataframe
2025-08-19 16:44:47,219:INFO:Initializing Bayesian Ridge
2025-08-19 16:44:47,219:INFO:Total runtime is 0.255270270506541 minutes
2025-08-19 16:44:47,219:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:47,219:INFO:Initializing create_model()
2025-08-19 16:44:47,220:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:47,220:INFO:Checking exceptions
2025-08-19 16:44:47,220:INFO:Importing libraries
2025-08-19 16:44:47,220:INFO:Copying training dataset
2025-08-19 16:44:47,224:INFO:Defining folds
2025-08-19 16:44:47,225:INFO:Declaring metric variables
2025-08-19 16:44:47,225:INFO:Importing untrained model
2025-08-19 16:44:47,226:INFO:Bayesian Ridge Imported successfully
2025-08-19 16:44:47,226:INFO:Starting cross validation
2025-08-19 16:44:47,226:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:47,315:INFO:Calculating mean and std
2025-08-19 16:44:47,316:INFO:Creating metrics dataframe
2025-08-19 16:44:47,318:INFO:Uploading results into container
2025-08-19 16:44:47,319:INFO:Uploading model into container now
2025-08-19 16:44:47,319:INFO:_master_model_container: 8
2025-08-19 16:44:47,319:INFO:_display_container: 2
2025-08-19 16:44:47,319:INFO:BayesianRidge()
2025-08-19 16:44:47,319:INFO:create_model() successfully completed......................................
2025-08-19 16:44:47,393:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:47,393:INFO:Creating metrics dataframe
2025-08-19 16:44:47,396:INFO:Initializing Passive Aggressive Regressor
2025-08-19 16:44:47,397:INFO:Total runtime is 0.2582158366839092 minutes
2025-08-19 16:44:47,397:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:47,397:INFO:Initializing create_model()
2025-08-19 16:44:47,397:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:47,397:INFO:Checking exceptions
2025-08-19 16:44:47,397:INFO:Importing libraries
2025-08-19 16:44:47,397:INFO:Copying training dataset
2025-08-19 16:44:47,402:INFO:Defining folds
2025-08-19 16:44:47,402:INFO:Declaring metric variables
2025-08-19 16:44:47,402:INFO:Importing untrained model
2025-08-19 16:44:47,403:INFO:Passive Aggressive Regressor Imported successfully
2025-08-19 16:44:47,403:INFO:Starting cross validation
2025-08-19 16:44:47,405:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:47,495:INFO:Calculating mean and std
2025-08-19 16:44:47,497:INFO:Creating metrics dataframe
2025-08-19 16:44:47,499:INFO:Uploading results into container
2025-08-19 16:44:47,499:INFO:Uploading model into container now
2025-08-19 16:44:47,500:INFO:_master_model_container: 9
2025-08-19 16:44:47,500:INFO:_display_container: 2
2025-08-19 16:44:47,500:INFO:PassiveAggressiveRegressor(random_state=123)
2025-08-19 16:44:47,500:INFO:create_model() successfully completed......................................
2025-08-19 16:44:47,574:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:47,574:INFO:Creating metrics dataframe
2025-08-19 16:44:47,578:INFO:Initializing Huber Regressor
2025-08-19 16:44:47,578:INFO:Total runtime is 0.2612457672754924 minutes
2025-08-19 16:44:47,578:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:47,578:INFO:Initializing create_model()
2025-08-19 16:44:47,578:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:47,578:INFO:Checking exceptions
2025-08-19 16:44:47,578:INFO:Importing libraries
2025-08-19 16:44:47,578:INFO:Copying training dataset
2025-08-19 16:44:47,584:INFO:Defining folds
2025-08-19 16:44:47,584:INFO:Declaring metric variables
2025-08-19 16:44:47,584:INFO:Importing untrained model
2025-08-19 16:44:47,585:INFO:Huber Regressor Imported successfully
2025-08-19 16:44:47,585:INFO:Starting cross validation
2025-08-19 16:44:47,586:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:47,689:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:44:47,699:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:44:47,713:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-19 16:44:47,737:INFO:Calculating mean and std
2025-08-19 16:44:47,737:INFO:Creating metrics dataframe
2025-08-19 16:44:47,739:INFO:Uploading results into container
2025-08-19 16:44:47,740:INFO:Uploading model into container now
2025-08-19 16:44:47,740:INFO:_master_model_container: 10
2025-08-19 16:44:47,741:INFO:_display_container: 2
2025-08-19 16:44:47,741:INFO:HuberRegressor()
2025-08-19 16:44:47,741:INFO:create_model() successfully completed......................................
2025-08-19 16:44:47,814:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:47,814:INFO:Creating metrics dataframe
2025-08-19 16:44:47,818:INFO:Initializing K Neighbors Regressor
2025-08-19 16:44:47,818:INFO:Total runtime is 0.2652546922365825 minutes
2025-08-19 16:44:47,818:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:47,818:INFO:Initializing create_model()
2025-08-19 16:44:47,819:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:47,819:INFO:Checking exceptions
2025-08-19 16:44:47,819:INFO:Importing libraries
2025-08-19 16:44:47,819:INFO:Copying training dataset
2025-08-19 16:44:47,823:INFO:Defining folds
2025-08-19 16:44:47,823:INFO:Declaring metric variables
2025-08-19 16:44:47,823:INFO:Importing untrained model
2025-08-19 16:44:47,823:INFO:K Neighbors Regressor Imported successfully
2025-08-19 16:44:47,824:INFO:Starting cross validation
2025-08-19 16:44:47,825:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:47,965:INFO:Calculating mean and std
2025-08-19 16:44:47,966:INFO:Creating metrics dataframe
2025-08-19 16:44:47,969:INFO:Uploading results into container
2025-08-19 16:44:47,969:INFO:Uploading model into container now
2025-08-19 16:44:47,970:INFO:_master_model_container: 11
2025-08-19 16:44:47,970:INFO:_display_container: 2
2025-08-19 16:44:47,970:INFO:KNeighborsRegressor(n_jobs=-1)
2025-08-19 16:44:47,970:INFO:create_model() successfully completed......................................
2025-08-19 16:44:48,045:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:48,045:INFO:Creating metrics dataframe
2025-08-19 16:44:48,049:INFO:Initializing Decision Tree Regressor
2025-08-19 16:44:48,049:INFO:Total runtime is 0.26910673379898076 minutes
2025-08-19 16:44:48,050:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:48,050:INFO:Initializing create_model()
2025-08-19 16:44:48,050:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:48,050:INFO:Checking exceptions
2025-08-19 16:44:48,051:INFO:Importing libraries
2025-08-19 16:44:48,051:INFO:Copying training dataset
2025-08-19 16:44:48,056:INFO:Defining folds
2025-08-19 16:44:48,057:INFO:Declaring metric variables
2025-08-19 16:44:48,057:INFO:Importing untrained model
2025-08-19 16:44:48,058:INFO:Decision Tree Regressor Imported successfully
2025-08-19 16:44:48,058:INFO:Starting cross validation
2025-08-19 16:44:48,058:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:48,145:INFO:Calculating mean and std
2025-08-19 16:44:48,146:INFO:Creating metrics dataframe
2025-08-19 16:44:48,148:INFO:Uploading results into container
2025-08-19 16:44:48,149:INFO:Uploading model into container now
2025-08-19 16:44:48,149:INFO:_master_model_container: 12
2025-08-19 16:44:48,149:INFO:_display_container: 2
2025-08-19 16:44:48,150:INFO:DecisionTreeRegressor(random_state=123)
2025-08-19 16:44:48,150:INFO:create_model() successfully completed......................................
2025-08-19 16:44:48,223:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:48,223:INFO:Creating metrics dataframe
2025-08-19 16:44:48,226:INFO:Initializing Random Forest Regressor
2025-08-19 16:44:48,226:INFO:Total runtime is 0.2720513741175334 minutes
2025-08-19 16:44:48,226:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:48,227:INFO:Initializing create_model()
2025-08-19 16:44:48,227:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:48,227:INFO:Checking exceptions
2025-08-19 16:44:48,227:INFO:Importing libraries
2025-08-19 16:44:48,227:INFO:Copying training dataset
2025-08-19 16:44:48,231:INFO:Defining folds
2025-08-19 16:44:48,231:INFO:Declaring metric variables
2025-08-19 16:44:48,231:INFO:Importing untrained model
2025-08-19 16:44:48,232:INFO:Random Forest Regressor Imported successfully
2025-08-19 16:44:48,232:INFO:Starting cross validation
2025-08-19 16:44:48,233:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:48,951:INFO:Calculating mean and std
2025-08-19 16:44:48,953:INFO:Creating metrics dataframe
2025-08-19 16:44:48,955:INFO:Uploading results into container
2025-08-19 16:44:48,956:INFO:Uploading model into container now
2025-08-19 16:44:48,956:INFO:_master_model_container: 13
2025-08-19 16:44:48,956:INFO:_display_container: 2
2025-08-19 16:44:48,957:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:44:48,957:INFO:create_model() successfully completed......................................
2025-08-19 16:44:49,039:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:49,040:INFO:Creating metrics dataframe
2025-08-19 16:44:49,044:INFO:Initializing Extra Trees Regressor
2025-08-19 16:44:49,044:INFO:Total runtime is 0.2856833060582479 minutes
2025-08-19 16:44:49,044:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:49,045:INFO:Initializing create_model()
2025-08-19 16:44:49,045:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:49,045:INFO:Checking exceptions
2025-08-19 16:44:49,045:INFO:Importing libraries
2025-08-19 16:44:49,045:INFO:Copying training dataset
2025-08-19 16:44:49,050:INFO:Defining folds
2025-08-19 16:44:49,050:INFO:Declaring metric variables
2025-08-19 16:44:49,051:INFO:Importing untrained model
2025-08-19 16:44:49,052:INFO:Extra Trees Regressor Imported successfully
2025-08-19 16:44:49,052:INFO:Starting cross validation
2025-08-19 16:44:49,053:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:49,749:INFO:Calculating mean and std
2025-08-19 16:44:49,751:INFO:Creating metrics dataframe
2025-08-19 16:44:49,755:INFO:Uploading results into container
2025-08-19 16:44:49,756:INFO:Uploading model into container now
2025-08-19 16:44:49,757:INFO:_master_model_container: 14
2025-08-19 16:44:49,757:INFO:_display_container: 2
2025-08-19 16:44:49,758:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:44:49,758:INFO:create_model() successfully completed......................................
2025-08-19 16:44:49,857:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:49,857:INFO:Creating metrics dataframe
2025-08-19 16:44:49,861:INFO:Initializing AdaBoost Regressor
2025-08-19 16:44:49,861:INFO:Total runtime is 0.2993081132570902 minutes
2025-08-19 16:44:49,861:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:49,862:INFO:Initializing create_model()
2025-08-19 16:44:49,862:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:49,862:INFO:Checking exceptions
2025-08-19 16:44:49,862:INFO:Importing libraries
2025-08-19 16:44:49,863:INFO:Copying training dataset
2025-08-19 16:44:49,870:INFO:Defining folds
2025-08-19 16:44:49,870:INFO:Declaring metric variables
2025-08-19 16:44:49,870:INFO:Importing untrained model
2025-08-19 16:44:49,870:INFO:AdaBoost Regressor Imported successfully
2025-08-19 16:44:49,871:INFO:Starting cross validation
2025-08-19 16:44:49,873:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:50,234:INFO:Calculating mean and std
2025-08-19 16:44:50,235:INFO:Creating metrics dataframe
2025-08-19 16:44:50,237:INFO:Uploading results into container
2025-08-19 16:44:50,238:INFO:Uploading model into container now
2025-08-19 16:44:50,239:INFO:_master_model_container: 15
2025-08-19 16:44:50,239:INFO:_display_container: 2
2025-08-19 16:44:50,239:INFO:AdaBoostRegressor(random_state=123)
2025-08-19 16:44:50,239:INFO:create_model() successfully completed......................................
2025-08-19 16:44:50,335:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:50,335:INFO:Creating metrics dataframe
2025-08-19 16:44:50,340:INFO:Initializing Gradient Boosting Regressor
2025-08-19 16:44:50,340:INFO:Total runtime is 0.3072768767674764 minutes
2025-08-19 16:44:50,340:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:50,341:INFO:Initializing create_model()
2025-08-19 16:44:50,341:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:50,341:INFO:Checking exceptions
2025-08-19 16:44:50,341:INFO:Importing libraries
2025-08-19 16:44:50,341:INFO:Copying training dataset
2025-08-19 16:44:50,347:INFO:Defining folds
2025-08-19 16:44:50,348:INFO:Declaring metric variables
2025-08-19 16:44:50,348:INFO:Importing untrained model
2025-08-19 16:44:50,349:INFO:Gradient Boosting Regressor Imported successfully
2025-08-19 16:44:50,349:INFO:Starting cross validation
2025-08-19 16:44:50,351:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:50,751:INFO:Calculating mean and std
2025-08-19 16:44:50,752:INFO:Creating metrics dataframe
2025-08-19 16:44:50,756:INFO:Uploading results into container
2025-08-19 16:44:50,756:INFO:Uploading model into container now
2025-08-19 16:44:50,757:INFO:_master_model_container: 16
2025-08-19 16:44:50,757:INFO:_display_container: 2
2025-08-19 16:44:50,757:INFO:GradientBoostingRegressor(random_state=123)
2025-08-19 16:44:50,757:INFO:create_model() successfully completed......................................
2025-08-19 16:44:50,834:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:50,834:INFO:Creating metrics dataframe
2025-08-19 16:44:50,838:INFO:Initializing Light Gradient Boosting Machine
2025-08-19 16:44:50,838:INFO:Total runtime is 0.3155800342559814 minutes
2025-08-19 16:44:50,838:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:50,838:INFO:Initializing create_model()
2025-08-19 16:44:50,838:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:50,838:INFO:Checking exceptions
2025-08-19 16:44:50,838:INFO:Importing libraries
2025-08-19 16:44:50,838:INFO:Copying training dataset
2025-08-19 16:44:50,843:INFO:Defining folds
2025-08-19 16:44:50,843:INFO:Declaring metric variables
2025-08-19 16:44:50,844:INFO:Importing untrained model
2025-08-19 16:44:50,844:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 16:44:50,844:INFO:Starting cross validation
2025-08-19 16:44:50,845:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:52,048:INFO:Calculating mean and std
2025-08-19 16:44:52,050:INFO:Creating metrics dataframe
2025-08-19 16:44:52,054:INFO:Uploading results into container
2025-08-19 16:44:52,054:INFO:Uploading model into container now
2025-08-19 16:44:52,055:INFO:_master_model_container: 17
2025-08-19 16:44:52,055:INFO:_display_container: 2
2025-08-19 16:44:52,057:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-08-19 16:44:52,057:INFO:create_model() successfully completed......................................
2025-08-19 16:44:52,168:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:52,168:INFO:Creating metrics dataframe
2025-08-19 16:44:52,172:INFO:Initializing Dummy Regressor
2025-08-19 16:44:52,172:INFO:Total runtime is 0.33781876564025876 minutes
2025-08-19 16:44:52,172:INFO:SubProcess create_model() called ==================================
2025-08-19 16:44:52,173:INFO:Initializing create_model()
2025-08-19 16:44:52,173:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022C8728BD30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:52,173:INFO:Checking exceptions
2025-08-19 16:44:52,173:INFO:Importing libraries
2025-08-19 16:44:52,173:INFO:Copying training dataset
2025-08-19 16:44:52,177:INFO:Defining folds
2025-08-19 16:44:52,177:INFO:Declaring metric variables
2025-08-19 16:44:52,177:INFO:Importing untrained model
2025-08-19 16:44:52,177:INFO:Dummy Regressor Imported successfully
2025-08-19 16:44:52,178:INFO:Starting cross validation
2025-08-19 16:44:52,179:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 16:44:52,258:INFO:Calculating mean and std
2025-08-19 16:44:52,259:INFO:Creating metrics dataframe
2025-08-19 16:44:52,261:INFO:Uploading results into container
2025-08-19 16:44:52,262:INFO:Uploading model into container now
2025-08-19 16:44:52,262:INFO:_master_model_container: 18
2025-08-19 16:44:52,262:INFO:_display_container: 2
2025-08-19 16:44:52,262:INFO:DummyRegressor()
2025-08-19 16:44:52,262:INFO:create_model() successfully completed......................................
2025-08-19 16:44:52,340:INFO:SubProcess create_model() end ==================================
2025-08-19 16:44:52,340:INFO:Creating metrics dataframe
2025-08-19 16:44:52,344:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-08-19 16:44:52,345:INFO:Initializing create_model()
2025-08-19 16:44:52,346:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C872E40A0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 16:44:52,346:INFO:Checking exceptions
2025-08-19 16:44:52,347:INFO:Importing libraries
2025-08-19 16:44:52,347:INFO:Copying training dataset
2025-08-19 16:44:52,352:INFO:Defining folds
2025-08-19 16:44:52,352:INFO:Declaring metric variables
2025-08-19 16:44:52,353:INFO:Importing untrained model
2025-08-19 16:44:52,353:INFO:Declaring custom model
2025-08-19 16:44:52,353:INFO:Linear Regression Imported successfully
2025-08-19 16:44:52,354:INFO:Cross validation set to False
2025-08-19 16:44:52,354:INFO:Fitting Model
2025-08-19 16:44:52,362:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:44:52,362:INFO:create_model() successfully completed......................................
2025-08-19 16:44:52,459:INFO:_master_model_container: 18
2025-08-19 16:44:52,459:INFO:_display_container: 2
2025-08-19 16:44:52,459:INFO:LinearRegression(n_jobs=-1)
2025-08-19 16:44:52,460:INFO:compare_models() successfully completed......................................
2025-08-19 18:50:04,163:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:50:04,163:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:50:04,163:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:50:04,163:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:50:49,129:INFO:PyCaret ClassificationExperiment
2025-08-19 18:50:49,129:INFO:Logging name: clf-default-name
2025-08-19 18:50:49,130:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-19 18:50:49,130:INFO:version 3.3.2
2025-08-19 18:50:49,131:INFO:Initializing setup()
2025-08-19 18:50:49,131:INFO:self.USI: 5bab
2025-08-19 18:50:49,131:INFO:self._variable_keys: {'exp_id', '_available_plots', 'idx', 'fix_imbalance', 'data', 'log_plots_param', 'seed', 'fold_generator', 'USI', 'memory', 'logging_param', 'n_jobs_param', 'X', 'X_train', 'is_multiclass', 'fold_groups_param', 'gpu_param', 'exp_name_log', 'pipeline', 'X_test', 'target_param', 'html_param', 'gpu_n_jobs_param', '_ml_usecase', 'y', 'fold_shuffle_param', 'y_test', 'y_train'}
2025-08-19 18:50:49,132:INFO:Checking environment
2025-08-19 18:50:49,132:INFO:python_version: 3.9.23
2025-08-19 18:50:49,133:INFO:python_build: ('main', 'Jun  5 2025 13:25:08')
2025-08-19 18:50:49,133:INFO:machine: AMD64
2025-08-19 18:50:49,190:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 18:50:49,196:INFO:Memory: svmem(total=17015848960, available=2043793408, percent=88.0, used=14972055552, free=2043793408)
2025-08-19 18:50:49,196:INFO:Physical Core: 6
2025-08-19 18:50:49,196:INFO:Logical Core: 12
2025-08-19 18:50:49,196:INFO:Checking libraries
2025-08-19 18:50:49,196:INFO:System:
2025-08-19 18:50:49,196:INFO:    python: 3.9.23 (main, Jun  5 2025, 13:25:08) [MSC v.1929 64 bit (AMD64)]
2025-08-19 18:50:49,196:INFO:executable: D:\Programming\My_works\conda_env\auto_ml\python.exe
2025-08-19 18:50:49,196:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 18:50:49,196:INFO:PyCaret required dependencies:
2025-08-19 18:50:49,638:INFO:                 pip: 25.1
2025-08-19 18:50:49,638:INFO:          setuptools: 78.1.1
2025-08-19 18:50:49,638:INFO:             pycaret: 3.3.2
2025-08-19 18:50:49,638:INFO:             IPython: 8.18.1
2025-08-19 18:50:49,638:INFO:          ipywidgets: 8.1.7
2025-08-19 18:50:49,638:INFO:                tqdm: 4.67.1
2025-08-19 18:50:49,638:INFO:               numpy: 1.26.4
2025-08-19 18:50:49,638:INFO:              pandas: 2.1.4
2025-08-19 18:50:49,638:INFO:              jinja2: 3.1.6
2025-08-19 18:50:49,638:INFO:               scipy: 1.11.4
2025-08-19 18:50:49,638:INFO:              joblib: 1.3.2
2025-08-19 18:50:49,639:INFO:             sklearn: 1.4.2
2025-08-19 18:50:49,639:INFO:                pyod: 2.0.5
2025-08-19 18:50:49,639:INFO:            imblearn: 0.12.4
2025-08-19 18:50:49,639:INFO:   category_encoders: 2.6.4
2025-08-19 18:50:49,639:INFO:            lightgbm: 4.6.0
2025-08-19 18:50:49,639:INFO:               numba: 0.60.0
2025-08-19 18:50:49,639:INFO:            requests: 2.32.5
2025-08-19 18:50:49,639:INFO:          matplotlib: 3.7.5
2025-08-19 18:50:49,639:INFO:          scikitplot: 0.3.7
2025-08-19 18:50:49,639:INFO:         yellowbrick: 1.5
2025-08-19 18:50:49,639:INFO:              plotly: 5.24.1
2025-08-19 18:50:49,639:INFO:    plotly-resampler: Not installed
2025-08-19 18:50:49,639:INFO:             kaleido: 1.0.0
2025-08-19 18:50:49,639:INFO:           schemdraw: 0.15
2025-08-19 18:50:49,640:INFO:         statsmodels: 0.14.5
2025-08-19 18:50:49,640:INFO:              sktime: 0.26.0
2025-08-19 18:50:49,640:INFO:               tbats: 1.1.3
2025-08-19 18:50:49,640:INFO:            pmdarima: 2.0.4
2025-08-19 18:50:49,640:INFO:              psutil: 6.1.0
2025-08-19 18:50:49,640:INFO:          markupsafe: 3.0.2
2025-08-19 18:50:49,640:INFO:             pickle5: Not installed
2025-08-19 18:50:49,640:INFO:         cloudpickle: 3.1.1
2025-08-19 18:50:49,640:INFO:         deprecation: 2.1.0
2025-08-19 18:50:49,640:INFO:              xxhash: 3.5.0
2025-08-19 18:50:49,640:INFO:           wurlitzer: Not installed
2025-08-19 18:50:49,640:INFO:PyCaret optional dependencies:
2025-08-19 18:50:50,221:INFO:                shap: Not installed
2025-08-19 18:50:50,221:INFO:           interpret: Not installed
2025-08-19 18:50:50,221:INFO:                umap: Not installed
2025-08-19 18:50:50,221:INFO:     ydata_profiling: Not installed
2025-08-19 18:50:50,222:INFO:  explainerdashboard: Not installed
2025-08-19 18:50:50,222:INFO:             autoviz: Not installed
2025-08-19 18:50:50,222:INFO:           fairlearn: Not installed
2025-08-19 18:50:50,222:INFO:          deepchecks: Not installed
2025-08-19 18:50:50,222:INFO:             xgboost: Not installed
2025-08-19 18:50:50,222:INFO:            catboost: Not installed
2025-08-19 18:50:50,222:INFO:              kmodes: Not installed
2025-08-19 18:50:50,222:INFO:             mlxtend: Not installed
2025-08-19 18:50:50,222:INFO:       statsforecast: Not installed
2025-08-19 18:50:50,222:INFO:        tune_sklearn: Not installed
2025-08-19 18:50:50,222:INFO:                 ray: Not installed
2025-08-19 18:50:50,222:INFO:            hyperopt: Not installed
2025-08-19 18:50:50,223:INFO:              optuna: Not installed
2025-08-19 18:50:50,223:INFO:               skopt: Not installed
2025-08-19 18:50:50,223:INFO:              mlflow: Not installed
2025-08-19 18:50:50,223:INFO:              gradio: Not installed
2025-08-19 18:50:50,223:INFO:             fastapi: 0.116.1
2025-08-19 18:50:50,223:INFO:             uvicorn: 0.35.0
2025-08-19 18:50:50,223:INFO:              m2cgen: Not installed
2025-08-19 18:50:50,223:INFO:           evidently: Not installed
2025-08-19 18:50:50,223:INFO:               fugue: Not installed
2025-08-19 18:50:50,223:INFO:           streamlit: 1.48.1
2025-08-19 18:50:50,223:INFO:             prophet: Not installed
2025-08-19 18:50:50,223:INFO:None
2025-08-19 18:50:50,223:INFO:Set up data.
2025-08-19 18:50:50,272:INFO:Set up folding strategy.
2025-08-19 18:50:50,272:INFO:Set up train/test split.
2025-08-19 18:50:50,394:INFO:Set up index.
2025-08-19 18:50:50,396:INFO:Assigning column types.
2025-08-19 18:50:50,406:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-19 18:50:50,451:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 18:50:50,471:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:50:50,527:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,527:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,568:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 18:50:50,569:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:50:50,595:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,596:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,596:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-19 18:50:50,639:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:50:50,666:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,667:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,711:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:50:50,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,741:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,742:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-19 18:50:50,814:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,814:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,883:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,884:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:50,914:INFO:Preparing preprocessing pipeline...
2025-08-19 18:50:50,919:INFO:Set up label encoding.
2025-08-19 18:50:50,920:INFO:Set up simple imputation.
2025-08-19 18:50:50,928:INFO:Set up encoding of ordinal features.
2025-08-19 18:50:50,932:INFO:Set up encoding of categorical features.
2025-08-19 18:50:51,151:INFO:Finished creating preprocessing pipeline.
2025-08-19 18:50:51,200:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Public\Documents\ESTsoft\CreatorTemp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Year', 'Engine_Size_L',
                                             'Mileage_KM', 'Price_USD',
                                             'Sales_Volume'],
                                    transformer=SimpleImpute...
Manual       1
NaN         -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['Model', 'Region', 'Color',
                                             'Fuel_Type'],
                                    transformer=OneHotEncoder(cols=['Model',
                                                                    'Region',
                                                                    'Color',
                                                                    'Fuel_Type'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-08-19 18:50:51,200:INFO:Creating final display dataframe.
2025-08-19 18:50:51,980:INFO:Setup _display_container:                     Description                 Value
0                    Session id                   123
1                        Target  Sales_Classification
2                   Target type                Binary
3                Target mapping       High: 0, Low: 1
4           Original data shape           (50000, 11)
5        Transformed data shape           (50000, 34)
6   Transformed train set shape           (35000, 34)
7    Transformed test set shape           (15000, 34)
8              Numeric features                     5
9          Categorical features                     5
10                   Preprocess                  True
11              Imputation type                simple
12           Numeric imputation                  mean
13       Categorical imputation                  mode
14     Maximum one-hot encoding                    25
15              Encoding method                  None
16               Fold Generator       StratifiedKFold
17                  Fold Number                    10
18                     CPU Jobs                    -1
19                      Use GPU                 False
20               Log Experiment                 False
21              Experiment Name      clf-default-name
22                          USI                  5bab
2025-08-19 18:50:52,064:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:52,065:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:52,136:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:52,136:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:50:52,139:INFO:setup() successfully completed in 3.02s...............
2025-08-19 18:50:52,139:INFO:Initializing compare_models()
2025-08-19 18:50:52,139:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-08-19 18:50:52,140:INFO:Checking exceptions
2025-08-19 18:50:52,176:INFO:Preparing display monitor
2025-08-19 18:50:52,180:INFO:Initializing Logistic Regression
2025-08-19 18:50:52,180:INFO:Total runtime is 0.0 minutes
2025-08-19 18:50:52,181:INFO:SubProcess create_model() called ==================================
2025-08-19 18:50:52,182:INFO:Initializing create_model()
2025-08-19 18:50:52,182:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:50:52,182:INFO:Checking exceptions
2025-08-19 18:50:52,182:INFO:Importing libraries
2025-08-19 18:50:52,182:INFO:Copying training dataset
2025-08-19 18:50:52,198:INFO:Defining folds
2025-08-19 18:50:52,199:INFO:Declaring metric variables
2025-08-19 18:50:52,199:INFO:Importing untrained model
2025-08-19 18:50:52,199:INFO:Logistic Regression Imported successfully
2025-08-19 18:50:52,199:INFO:Starting cross validation
2025-08-19 18:50:52,201:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:06,119:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,245:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,287:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,335:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,365:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,435:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,452:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,488:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,493:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,499:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,507:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,511:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,519:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,534:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,541:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,562:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,569:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,571:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,571:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,584:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,588:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,615:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,621:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,623:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,628:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,677:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,727:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,858:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,889:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,913:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:06,960:INFO:Calculating mean and std
2025-08-19 18:51:06,961:INFO:Creating metrics dataframe
2025-08-19 18:51:06,964:INFO:Uploading results into container
2025-08-19 18:51:06,965:INFO:Uploading model into container now
2025-08-19 18:51:06,966:INFO:_master_model_container: 1
2025-08-19 18:51:06,966:INFO:_display_container: 2
2025-08-19 18:51:06,967:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-19 18:51:06,967:INFO:create_model() successfully completed......................................
2025-08-19 18:51:07,048:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:07,048:INFO:Creating metrics dataframe
2025-08-19 18:51:07,051:INFO:Initializing K Neighbors Classifier
2025-08-19 18:51:07,052:INFO:Total runtime is 0.24785422881444294 minutes
2025-08-19 18:51:07,052:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:07,052:INFO:Initializing create_model()
2025-08-19 18:51:07,052:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:07,052:INFO:Checking exceptions
2025-08-19 18:51:07,052:INFO:Importing libraries
2025-08-19 18:51:07,052:INFO:Copying training dataset
2025-08-19 18:51:07,070:INFO:Defining folds
2025-08-19 18:51:07,070:INFO:Declaring metric variables
2025-08-19 18:51:07,070:INFO:Importing untrained model
2025-08-19 18:51:07,071:INFO:K Neighbors Classifier Imported successfully
2025-08-19 18:51:07,072:INFO:Starting cross validation
2025-08-19 18:51:07,073:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:13,757:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,791:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,835:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,865:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,879:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,898:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,935:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,944:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:13,964:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,000:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,025:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,033:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,067:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,071:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,072:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,105:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,130:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,135:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,167:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,179:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,184:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,192:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,227:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:14,267:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,503:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,527:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,545:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,551:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,580:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,608:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:17,642:INFO:Calculating mean and std
2025-08-19 18:51:17,644:INFO:Creating metrics dataframe
2025-08-19 18:51:17,646:INFO:Uploading results into container
2025-08-19 18:51:17,646:INFO:Uploading model into container now
2025-08-19 18:51:17,646:INFO:_master_model_container: 2
2025-08-19 18:51:17,646:INFO:_display_container: 2
2025-08-19 18:51:17,647:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-19 18:51:17,647:INFO:create_model() successfully completed......................................
2025-08-19 18:51:17,734:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:17,734:INFO:Creating metrics dataframe
2025-08-19 18:51:17,737:INFO:Initializing Naive Bayes
2025-08-19 18:51:17,737:INFO:Total runtime is 0.42595018943150836 minutes
2025-08-19 18:51:17,737:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:17,738:INFO:Initializing create_model()
2025-08-19 18:51:17,738:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:17,738:INFO:Checking exceptions
2025-08-19 18:51:17,738:INFO:Importing libraries
2025-08-19 18:51:17,738:INFO:Copying training dataset
2025-08-19 18:51:17,753:INFO:Defining folds
2025-08-19 18:51:17,753:INFO:Declaring metric variables
2025-08-19 18:51:17,753:INFO:Importing untrained model
2025-08-19 18:51:17,754:INFO:Naive Bayes Imported successfully
2025-08-19 18:51:17,754:INFO:Starting cross validation
2025-08-19 18:51:17,756:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:19,051:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,113:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,134:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,153:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,164:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,168:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,193:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,194:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,201:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,206:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,212:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,216:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,220:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,251:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,263:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,265:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,273:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,274:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,276:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,281:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,281:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,301:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,314:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,317:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,329:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,336:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,341:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,355:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,394:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,408:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:19,475:INFO:Calculating mean and std
2025-08-19 18:51:19,476:INFO:Creating metrics dataframe
2025-08-19 18:51:19,479:INFO:Uploading results into container
2025-08-19 18:51:19,479:INFO:Uploading model into container now
2025-08-19 18:51:19,480:INFO:_master_model_container: 3
2025-08-19 18:51:19,480:INFO:_display_container: 2
2025-08-19 18:51:19,480:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-08-19 18:51:19,480:INFO:create_model() successfully completed......................................
2025-08-19 18:51:19,567:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:19,567:INFO:Creating metrics dataframe
2025-08-19 18:51:19,571:INFO:Initializing Decision Tree Classifier
2025-08-19 18:51:19,571:INFO:Total runtime is 0.4565177957216898 minutes
2025-08-19 18:51:19,572:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:19,572:INFO:Initializing create_model()
2025-08-19 18:51:19,572:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:19,572:INFO:Checking exceptions
2025-08-19 18:51:19,573:INFO:Importing libraries
2025-08-19 18:51:19,573:INFO:Copying training dataset
2025-08-19 18:51:19,592:INFO:Defining folds
2025-08-19 18:51:19,592:INFO:Declaring metric variables
2025-08-19 18:51:19,593:INFO:Importing untrained model
2025-08-19 18:51:19,593:INFO:Decision Tree Classifier Imported successfully
2025-08-19 18:51:19,594:INFO:Starting cross validation
2025-08-19 18:51:19,596:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:20,960:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:20,975:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:20,976:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:20,977:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:20,992:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:20,999:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,013:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,020:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,023:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,024:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,024:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,026:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,029:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,043:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,049:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,064:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,066:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,076:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,079:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,083:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,085:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,085:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,106:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,107:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,111:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,122:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,127:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,142:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,143:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,168:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:21,248:INFO:Calculating mean and std
2025-08-19 18:51:21,249:INFO:Creating metrics dataframe
2025-08-19 18:51:21,253:INFO:Uploading results into container
2025-08-19 18:51:21,255:INFO:Uploading model into container now
2025-08-19 18:51:21,256:INFO:_master_model_container: 4
2025-08-19 18:51:21,256:INFO:_display_container: 2
2025-08-19 18:51:21,257:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-19 18:51:21,257:INFO:create_model() successfully completed......................................
2025-08-19 18:51:21,350:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:21,350:INFO:Creating metrics dataframe
2025-08-19 18:51:21,355:INFO:Initializing SVM - Linear Kernel
2025-08-19 18:51:21,355:INFO:Total runtime is 0.4862437049547831 minutes
2025-08-19 18:51:21,356:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:21,356:INFO:Initializing create_model()
2025-08-19 18:51:21,356:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:21,356:INFO:Checking exceptions
2025-08-19 18:51:21,356:INFO:Importing libraries
2025-08-19 18:51:21,356:INFO:Copying training dataset
2025-08-19 18:51:21,375:INFO:Defining folds
2025-08-19 18:51:21,375:INFO:Declaring metric variables
2025-08-19 18:51:21,376:INFO:Importing untrained model
2025-08-19 18:51:21,376:INFO:SVM - Linear Kernel Imported successfully
2025-08-19 18:51:21,377:INFO:Starting cross validation
2025-08-19 18:51:21,379:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:23,712:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,744:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,762:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,794:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,812:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,842:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,920:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,965:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:23,998:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,011:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,034:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,039:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,041:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,076:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,083:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,087:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,114:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,129:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,129:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,174:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,177:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,220:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,221:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,226:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,267:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,274:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,303:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,342:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,380:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,418:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:24,470:INFO:Calculating mean and std
2025-08-19 18:51:24,471:INFO:Creating metrics dataframe
2025-08-19 18:51:24,474:INFO:Uploading results into container
2025-08-19 18:51:24,476:INFO:Uploading model into container now
2025-08-19 18:51:24,477:INFO:_master_model_container: 5
2025-08-19 18:51:24,477:INFO:_display_container: 2
2025-08-19 18:51:24,478:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-08-19 18:51:24,478:INFO:create_model() successfully completed......................................
2025-08-19 18:51:24,577:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:24,578:INFO:Creating metrics dataframe
2025-08-19 18:51:24,581:INFO:Initializing Ridge Classifier
2025-08-19 18:51:24,582:INFO:Total runtime is 0.540026565392812 minutes
2025-08-19 18:51:24,582:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:24,582:INFO:Initializing create_model()
2025-08-19 18:51:24,583:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:24,583:INFO:Checking exceptions
2025-08-19 18:51:24,583:INFO:Importing libraries
2025-08-19 18:51:24,583:INFO:Copying training dataset
2025-08-19 18:51:24,604:INFO:Defining folds
2025-08-19 18:51:24,604:INFO:Declaring metric variables
2025-08-19 18:51:24,604:INFO:Importing untrained model
2025-08-19 18:51:24,604:INFO:Ridge Classifier Imported successfully
2025-08-19 18:51:24,605:INFO:Starting cross validation
2025-08-19 18:51:24,608:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:26,016:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,030:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,034:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,035:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,042:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,043:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,044:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,048:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,052:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,053:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,068:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,087:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,093:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,099:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,100:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,103:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,105:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,114:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,116:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,121:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,126:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,145:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,156:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,158:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,161:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,163:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,171:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,180:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,187:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,198:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:26,286:INFO:Calculating mean and std
2025-08-19 18:51:26,287:INFO:Creating metrics dataframe
2025-08-19 18:51:26,290:INFO:Uploading results into container
2025-08-19 18:51:26,291:INFO:Uploading model into container now
2025-08-19 18:51:26,292:INFO:_master_model_container: 6
2025-08-19 18:51:26,292:INFO:_display_container: 2
2025-08-19 18:51:26,292:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-08-19 18:51:26,292:INFO:create_model() successfully completed......................................
2025-08-19 18:51:26,377:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:26,377:INFO:Creating metrics dataframe
2025-08-19 18:51:26,381:INFO:Initializing Random Forest Classifier
2025-08-19 18:51:26,381:INFO:Total runtime is 0.5700120369593301 minutes
2025-08-19 18:51:26,381:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:26,382:INFO:Initializing create_model()
2025-08-19 18:51:26,382:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:26,382:INFO:Checking exceptions
2025-08-19 18:51:26,382:INFO:Importing libraries
2025-08-19 18:51:26,382:INFO:Copying training dataset
2025-08-19 18:51:26,401:INFO:Defining folds
2025-08-19 18:51:26,401:INFO:Declaring metric variables
2025-08-19 18:51:26,401:INFO:Importing untrained model
2025-08-19 18:51:26,401:INFO:Random Forest Classifier Imported successfully
2025-08-19 18:51:26,402:INFO:Starting cross validation
2025-08-19 18:51:26,404:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:31,858:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:31,916:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:31,916:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:31,921:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:31,937:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:31,962:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:31,999:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,004:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,006:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,015:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,017:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,036:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,060:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,062:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,073:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,084:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,088:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,108:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,112:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,136:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,141:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,155:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,155:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,189:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,198:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,217:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,219:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,247:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,270:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,271:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:32,357:INFO:Calculating mean and std
2025-08-19 18:51:32,360:INFO:Creating metrics dataframe
2025-08-19 18:51:32,365:INFO:Uploading results into container
2025-08-19 18:51:32,367:INFO:Uploading model into container now
2025-08-19 18:51:32,368:INFO:_master_model_container: 7
2025-08-19 18:51:32,368:INFO:_display_container: 2
2025-08-19 18:51:32,369:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-08-19 18:51:32,369:INFO:create_model() successfully completed......................................
2025-08-19 18:51:32,469:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:32,469:INFO:Creating metrics dataframe
2025-08-19 18:51:32,473:INFO:Initializing Quadratic Discriminant Analysis
2025-08-19 18:51:32,473:INFO:Total runtime is 0.6715391119321186 minutes
2025-08-19 18:51:32,473:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:32,473:INFO:Initializing create_model()
2025-08-19 18:51:32,473:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:32,473:INFO:Checking exceptions
2025-08-19 18:51:32,473:INFO:Importing libraries
2025-08-19 18:51:32,474:INFO:Copying training dataset
2025-08-19 18:51:32,492:INFO:Defining folds
2025-08-19 18:51:32,493:INFO:Declaring metric variables
2025-08-19 18:51:32,494:INFO:Importing untrained model
2025-08-19 18:51:32,494:INFO:Quadratic Discriminant Analysis Imported successfully
2025-08-19 18:51:32,495:INFO:Starting cross validation
2025-08-19 18:51:32,498:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:34,002:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,003:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,004:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,004:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,004:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,004:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,086:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:51:34,696:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,721:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,750:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,759:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,771:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,777:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,798:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,801:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,806:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,818:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,820:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,853:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,854:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,856:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,861:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,878:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,877:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,904:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,911:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,917:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,927:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,959:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:34,986:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,006:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,013:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,023:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,084:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,092:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,137:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,147:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:35,230:INFO:Calculating mean and std
2025-08-19 18:51:35,233:INFO:Creating metrics dataframe
2025-08-19 18:51:35,238:INFO:Uploading results into container
2025-08-19 18:51:35,239:INFO:Uploading model into container now
2025-08-19 18:51:35,239:INFO:_master_model_container: 8
2025-08-19 18:51:35,240:INFO:_display_container: 2
2025-08-19 18:51:35,240:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-08-19 18:51:35,241:INFO:create_model() successfully completed......................................
2025-08-19 18:51:35,383:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:35,383:INFO:Creating metrics dataframe
2025-08-19 18:51:35,388:INFO:Initializing Ada Boost Classifier
2025-08-19 18:51:35,388:INFO:Total runtime is 0.7201338330904641 minutes
2025-08-19 18:51:35,389:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:35,389:INFO:Initializing create_model()
2025-08-19 18:51:35,389:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:35,389:INFO:Checking exceptions
2025-08-19 18:51:35,390:INFO:Importing libraries
2025-08-19 18:51:35,390:INFO:Copying training dataset
2025-08-19 18:51:35,414:INFO:Defining folds
2025-08-19 18:51:35,414:INFO:Declaring metric variables
2025-08-19 18:51:35,415:INFO:Importing untrained model
2025-08-19 18:51:35,416:INFO:Ada Boost Classifier Imported successfully
2025-08-19 18:51:35,417:INFO:Starting cross validation
2025-08-19 18:51:35,419:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:36,619:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,619:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,620:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,621:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,620:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,621:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,621:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,649:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:51:36,857:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,864:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,869:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,870:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,871:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,874:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,875:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,875:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,883:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,896:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,910:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,924:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,927:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,927:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,930:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,932:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,933:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,936:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,941:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,957:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,971:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,980:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,988:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,992:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,993:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:36,993:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:37,004:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:37,019:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:37,019:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:37,036:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:37,124:INFO:Calculating mean and std
2025-08-19 18:51:37,126:INFO:Creating metrics dataframe
2025-08-19 18:51:37,130:INFO:Uploading results into container
2025-08-19 18:51:37,130:INFO:Uploading model into container now
2025-08-19 18:51:37,131:INFO:_master_model_container: 9
2025-08-19 18:51:37,131:INFO:_display_container: 2
2025-08-19 18:51:37,131:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-08-19 18:51:37,132:INFO:create_model() successfully completed......................................
2025-08-19 18:51:37,229:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:37,229:INFO:Creating metrics dataframe
2025-08-19 18:51:37,236:INFO:Initializing Gradient Boosting Classifier
2025-08-19 18:51:37,236:INFO:Total runtime is 0.7509317676226296 minutes
2025-08-19 18:51:37,236:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:37,236:INFO:Initializing create_model()
2025-08-19 18:51:37,237:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:37,237:INFO:Checking exceptions
2025-08-19 18:51:37,237:INFO:Importing libraries
2025-08-19 18:51:37,237:INFO:Copying training dataset
2025-08-19 18:51:37,264:INFO:Defining folds
2025-08-19 18:51:37,264:INFO:Declaring metric variables
2025-08-19 18:51:37,265:INFO:Importing untrained model
2025-08-19 18:51:37,265:INFO:Gradient Boosting Classifier Imported successfully
2025-08-19 18:51:37,266:INFO:Starting cross validation
2025-08-19 18:51:37,268:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:46,402:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,474:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,535:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,584:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,620:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,638:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,672:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,675:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,692:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,698:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,727:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,735:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,758:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,772:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,794:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,825:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,833:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,876:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,884:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,932:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:46,975:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,028:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,072:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,116:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,121:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,159:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,198:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,206:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,239:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,275:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:47,329:INFO:Calculating mean and std
2025-08-19 18:51:47,330:INFO:Creating metrics dataframe
2025-08-19 18:51:47,333:INFO:Uploading results into container
2025-08-19 18:51:47,333:INFO:Uploading model into container now
2025-08-19 18:51:47,334:INFO:_master_model_container: 10
2025-08-19 18:51:47,335:INFO:_display_container: 2
2025-08-19 18:51:47,335:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-08-19 18:51:47,335:INFO:create_model() successfully completed......................................
2025-08-19 18:51:47,429:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:47,429:INFO:Creating metrics dataframe
2025-08-19 18:51:47,433:INFO:Initializing Linear Discriminant Analysis
2025-08-19 18:51:47,433:INFO:Total runtime is 0.9208795944849648 minutes
2025-08-19 18:51:47,434:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:47,434:INFO:Initializing create_model()
2025-08-19 18:51:47,434:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:47,434:INFO:Checking exceptions
2025-08-19 18:51:47,434:INFO:Importing libraries
2025-08-19 18:51:47,434:INFO:Copying training dataset
2025-08-19 18:51:47,460:INFO:Defining folds
2025-08-19 18:51:47,460:INFO:Declaring metric variables
2025-08-19 18:51:47,461:INFO:Importing untrained model
2025-08-19 18:51:47,462:INFO:Linear Discriminant Analysis Imported successfully
2025-08-19 18:51:47,462:INFO:Starting cross validation
2025-08-19 18:51:47,466:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:49,380:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,398:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,417:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,418:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,420:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,423:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,430:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,446:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,449:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,451:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,466:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,471:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,472:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,472:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,476:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,485:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,485:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,495:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,501:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,505:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,513:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,517:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,522:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,525:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,531:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,540:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,543:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,546:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,563:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,590:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:49,650:INFO:Calculating mean and std
2025-08-19 18:51:49,651:INFO:Creating metrics dataframe
2025-08-19 18:51:49,654:INFO:Uploading results into container
2025-08-19 18:51:49,656:INFO:Uploading model into container now
2025-08-19 18:51:49,657:INFO:_master_model_container: 11
2025-08-19 18:51:49,657:INFO:_display_container: 2
2025-08-19 18:51:49,657:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-08-19 18:51:49,657:INFO:create_model() successfully completed......................................
2025-08-19 18:51:49,766:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:49,766:INFO:Creating metrics dataframe
2025-08-19 18:51:49,770:INFO:Initializing Extra Trees Classifier
2025-08-19 18:51:49,771:INFO:Total runtime is 0.9598365227381387 minutes
2025-08-19 18:51:49,771:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:49,771:INFO:Initializing create_model()
2025-08-19 18:51:49,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:49,771:INFO:Checking exceptions
2025-08-19 18:51:49,771:INFO:Importing libraries
2025-08-19 18:51:49,771:INFO:Copying training dataset
2025-08-19 18:51:49,790:INFO:Defining folds
2025-08-19 18:51:49,791:INFO:Declaring metric variables
2025-08-19 18:51:49,791:INFO:Importing untrained model
2025-08-19 18:51:49,791:INFO:Extra Trees Classifier Imported successfully
2025-08-19 18:51:49,792:INFO:Starting cross validation
2025-08-19 18:51:49,795:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:51:58,240:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,254:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,359:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,385:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,428:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,484:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,491:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,524:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,534:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,563:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,617:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,617:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,640:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,678:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,753:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,777:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,818:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,825:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,829:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,845:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,854:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,855:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,902:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,913:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,915:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,919:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,924:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,973:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,974:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:58,984:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:51:59,091:INFO:Calculating mean and std
2025-08-19 18:51:59,094:INFO:Creating metrics dataframe
2025-08-19 18:51:59,100:INFO:Uploading results into container
2025-08-19 18:51:59,101:INFO:Uploading model into container now
2025-08-19 18:51:59,102:INFO:_master_model_container: 12
2025-08-19 18:51:59,102:INFO:_display_container: 2
2025-08-19 18:51:59,103:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-19 18:51:59,104:INFO:create_model() successfully completed......................................
2025-08-19 18:51:59,259:INFO:SubProcess create_model() end ==================================
2025-08-19 18:51:59,260:INFO:Creating metrics dataframe
2025-08-19 18:51:59,265:INFO:Initializing Light Gradient Boosting Machine
2025-08-19 18:51:59,265:INFO:Total runtime is 1.118083866437276 minutes
2025-08-19 18:51:59,266:INFO:SubProcess create_model() called ==================================
2025-08-19 18:51:59,267:INFO:Initializing create_model()
2025-08-19 18:51:59,267:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:51:59,267:INFO:Checking exceptions
2025-08-19 18:51:59,267:INFO:Importing libraries
2025-08-19 18:51:59,267:INFO:Copying training dataset
2025-08-19 18:51:59,297:INFO:Defining folds
2025-08-19 18:51:59,298:INFO:Declaring metric variables
2025-08-19 18:51:59,298:INFO:Importing untrained model
2025-08-19 18:51:59,299:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 18:51:59,300:INFO:Starting cross validation
2025-08-19 18:51:59,304:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:52:02,411:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,477:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,481:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,559:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,565:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,597:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,653:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,660:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,680:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,726:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,740:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:02,787:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,033:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,109:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,121:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,159:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,181:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,195:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,226:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,260:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,293:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,465:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,528:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,559:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,588:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,613:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,626:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,686:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,687:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,733:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:03,810:INFO:Calculating mean and std
2025-08-19 18:52:03,811:INFO:Creating metrics dataframe
2025-08-19 18:52:03,816:INFO:Uploading results into container
2025-08-19 18:52:03,816:INFO:Uploading model into container now
2025-08-19 18:52:03,817:INFO:_master_model_container: 13
2025-08-19 18:52:03,817:INFO:_display_container: 2
2025-08-19 18:52:03,818:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-19 18:52:03,818:INFO:create_model() successfully completed......................................
2025-08-19 18:52:03,929:INFO:SubProcess create_model() end ==================================
2025-08-19 18:52:03,929:INFO:Creating metrics dataframe
2025-08-19 18:52:03,934:INFO:Initializing Dummy Classifier
2025-08-19 18:52:03,935:INFO:Total runtime is 1.1959027687708537 minutes
2025-08-19 18:52:03,935:INFO:SubProcess create_model() called ==================================
2025-08-19 18:52:03,936:INFO:Initializing create_model()
2025-08-19 18:52:03,936:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024F24394670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:52:03,936:INFO:Checking exceptions
2025-08-19 18:52:03,936:INFO:Importing libraries
2025-08-19 18:52:03,936:INFO:Copying training dataset
2025-08-19 18:52:03,961:INFO:Defining folds
2025-08-19 18:52:03,962:INFO:Declaring metric variables
2025-08-19 18:52:03,962:INFO:Importing untrained model
2025-08-19 18:52:03,963:INFO:Dummy Classifier Imported successfully
2025-08-19 18:52:03,963:INFO:Starting cross validation
2025-08-19 18:52:03,967:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:52:05,180:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,202:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,235:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,239:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,251:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,254:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,262:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,266:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,289:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,294:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,295:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,297:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,305:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,307:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,309:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,316:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,321:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,327:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,330:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,334:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,339:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,344:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,348:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,352:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,355:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,362:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,372:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,381:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,384:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,393:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,400:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,407:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,411:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,416:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,424:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,429:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:52:05,431:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,438:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,446:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,452:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:52:05,526:INFO:Calculating mean and std
2025-08-19 18:52:05,527:INFO:Creating metrics dataframe
2025-08-19 18:52:05,531:INFO:Uploading results into container
2025-08-19 18:52:05,532:INFO:Uploading model into container now
2025-08-19 18:52:05,533:INFO:_master_model_container: 14
2025-08-19 18:52:05,533:INFO:_display_container: 2
2025-08-19 18:52:05,533:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-08-19 18:52:05,533:INFO:create_model() successfully completed......................................
2025-08-19 18:52:05,652:INFO:SubProcess create_model() end ==================================
2025-08-19 18:52:05,652:INFO:Creating metrics dataframe
2025-08-19 18:52:05,809:WARNING:D:\Programming\My_works\conda_env\auto_ml\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-08-19 18:52:05,813:INFO:Initializing create_model()
2025-08-19 18:52:05,813:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F243312E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:52:05,813:INFO:Checking exceptions
2025-08-19 18:52:05,815:INFO:Importing libraries
2025-08-19 18:52:05,815:INFO:Copying training dataset
2025-08-19 18:52:05,839:INFO:Defining folds
2025-08-19 18:52:05,839:INFO:Declaring metric variables
2025-08-19 18:52:05,840:INFO:Importing untrained model
2025-08-19 18:52:05,840:INFO:Declaring custom model
2025-08-19 18:52:05,841:INFO:Decision Tree Classifier Imported successfully
2025-08-19 18:52:05,845:INFO:Cross validation set to False
2025-08-19 18:52:05,846:INFO:Fitting Model
2025-08-19 18:52:06,420:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-19 18:52:06,421:INFO:create_model() successfully completed......................................
2025-08-19 18:52:06,562:INFO:_master_model_container: 14
2025-08-19 18:52:06,563:INFO:_display_container: 2
2025-08-19 18:52:06,563:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-19 18:52:06,563:INFO:compare_models() successfully completed......................................
